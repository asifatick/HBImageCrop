<?xml version="1.0"?>
<doc>
  <assembly>
    <name>DynamicDotNetTWAIN</name>
  </assembly>
  <members>
    <member name="T:Dynamsoft.DotNet.TWAIN.Barcode.Result">
      <summary>
            Encapsulates the result of decoding a barcode within an image.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.Barcode.Result.Text">
      <returns> raw text encoded by the barcode, if applicable, otherwise <code>null</code>
            </returns>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.Barcode.Result.RawBytes">
      <returns> raw bytes encoded by the barcode, if applicable, otherwise <code>null</code>
            </returns>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.Barcode.Result.ResultPoints">
      <returns> points related to the barcode in the image. These are typically points
            identifying finder patterns or the corners of the barcode. The exact meaning is
            specific to the type of barcode that was decoded.
            </returns>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.Barcode.Result.BarcodeFormat">
      <returns> {@link BarcodeFormat} representing the format of the barcode that was decoded
            </returns>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Business.ImageOperator">
      <summary>
            Summary description for ImageOperator.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Business.MultiImageTwain">
      <summary>
            Summary description for MultiImageTwain.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Business.TwainBase">
      <summary>
            Summary description for TwainBase.
            </summary>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.Business.TwainBase.SelectSourceByIndex(System.Int32)">
      <summary>
            open the data source in m_idSourceList
            </summary>
      <param name="index"/>
      <returns/>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.Business.TwainBase.OpenSource">
      <summary>
            open the default data source
            </summary>
      <returns/>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.Business.TwainBase.OpenSourceManager">
      <summary>
               Function name: OpenSourceManager
               Description: Load source manager and open it
               Return:	TRUE: successful, 
            		    FALSE: failed. The client should call GetErrorCode and GetErrorString to get more information
               Steps: 1. load source manager
            	     2. open it
            	     3. populate source list
               Comment:	there is not a callable function of LoadSourceManager
            </summary>
      <returns/>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Business.WebTwainBase">
      <summary>
            Summary description for WebTwainBase.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Business.TwainOperateWrapper">
      <summary>
            Summary description for TwainOperateWrapper.
            </summary>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.Business.WebTwainBase.FTPUpload(System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
      <summary>
            </summary>
      <param name="strFTPServer"/>
      <param name="strFTPRemoteFile"/>
      <param name="sImageIndex">-1,&#x8868;&#x793A;&#x6240;&#x6709;&#x56FE;&#x7247;</param>
      <param name="enumImageType"/>
      <returns/>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.Business.WebTwainBase.ConvertPDFToImageInner(System.String,System.Byte[],System.Single)">
      <summary>
            One of strFileName and bytFile must be null.
            </summary>
      <param name="strFileName"/>
      <param name="bytFile"/>
      <param name="fResolution"/>
      <returns/>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Cancel">
      <summary>
            Implements the ICancel interface.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.ConstStringHelper">
      <summary>
            Summary description for ConstStringHelper.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.IndexList">
      <summary>
            Implements the IIndexList interface using an array whose size is dynamically increased as required.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.StringArray">
      <summary>
            Summary description for StringArray.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain">
      <summary>
            Implements the ITwain, ITwainEvent interface using an UserControl.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AcquireImage">
      <summary>
            Displays the source's built-in interface to acquire image.
            </summary>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            This method does the same thing as EnableSource(). 
            The purpose of providing this method is to enable user to handle Twain-compliant image acquisition device without knowing the terms used in Twain specification.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CancelAllPendingTransfers">
      <summary>
            Cancels all pending transfers.
            </summary>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The CancelAllPendingTransfers method is valid only in OnPreAllTransfers, 
            OnPreTransfer and OnPostTransfer events.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGet">
      <summary>
            Gets information of the capability specified by the Capability property.
            </summary>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Before invoking CapGet(), Capability property should be set.
            
            CapType property needs not to be set, since when CapGet() is called, 
            The container type is returned by the source, 
            rather than specified by the application.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGetCurrent">
      <summary>
            Returns the Source's current value for the specified capability.
            </summary>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Before invoking CapGetCurrent(), Capability property should be set.
            After calling CapGetCurrent(), 
            check CapType property for the capability container type and then read information from different properties according to the container type. 
            This process is the same as CapGet(), please refer to CapType property and Reading Value(s) from Capability Negotiation.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGetDefault">
      <summary>
            Returns the Source's default value for the specified capability. This is the Source's preferred default value.
            </summary>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Before invoking CapGetDefault(), Capability property should be set.
            The Source's Default Value cannot be changed.
            Using the Source's preferred default as the Current Value may increase performance in some Sources.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGetFrameBottom(System.Int32)">
      <summary>
            Returns the value (in ICAP_UNITS) of the bottom-most edge of the specified frame.
            </summary>
      <param name="iIndex">
            Specifies the value of which frame to get. The index is 0-based.
            </param>
      <returns>
            The data type of the return value is Single (float).
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The unit of CapGetFrameBottom() is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            CapGetFrameBottom() is different from ImageLayoutFrameBottom property. 
            CapGetFrameBottom() is part of ICAP_FRAMES capability negotiation. It can return the value of any frames in a page.
            ImageLayoutFrameBottom property only returns the value of the current frame which is being transferred. 
            It is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGetFrameLeft(System.Int32)">
      <summary>
            Returns the value (in ICAP_UNITS) of the left-most edge of the specified frame.
            </summary>
      <param name="iIndex">
            Specifies the value of which frame to get. The index is 0-based.
            </param>
      <returns>
            The data type of the return value is Single (float).
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The unit of CapGetFrameLeft() is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            CapGetFrameLeft() is different from ImageLayoutFrameLeft property. 
            CapGetFrameLeft() is part of ICAP_FRAMES capability negotiation. It can return the value of any frames in a page.
            ImageLayoutFrameleft property only returns the value of the current frame which is being transferred. It is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGetFrameRight(System.Int32)">
      <summary>
            Returns the value (in ICAP_UNITS) of the right-most edge of the specified frame.
            </summary>
      <param name="iIndex">
            Specifies the value of which frame to get. The index is 0-based.
            </param>
      <returns>
            The data type of the return value is Single (float).
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The unit of CapGetFrameRight() is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            CapGetFrameRight() is different from ImageLayoutFrameRight property. 
            CapGetFrameRight() is part of ICAP_FRAMES capability negotiation. It can return the value of any frames in a page.
            ImageLayoutFrameRight property only returns the value of the current frame which is being transferred. It is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapGetFrameTop(System.Int32)">
      <summary>
            Returns the value (in ICAP_UNITS) of the top-most edge of the specified frame.
            </summary>
      <param name="iIndex">
            Specifies the value of which frame to get. The index is 0-based.
            </param>
      <returns>
            The data type of the return value is Single (float).
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The unit of CapGetFrameTop() is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            CapGetFrameTop() is different from ImageLayoutFrameTop property. 
            CapGetFrameTop() is part of ICAP_FRAMES capability negotiation. 
            It can return the value of any frames in a page.
            ImageLayoutFrameTop property only returns the value of the current frame which is being transferred.
            It is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapIfSupported(Dynamsoft.DotNet.TWAIN.Enums.TWQC)">
      <summary>
            Queries whether the Source supports a particular operation on the capability.
            </summary>
      <param name="enumMessageType">
            TWQC type: specifies the type of capability operation.
            Value Description 
            TWQC_GET (1): If CapGet() is supported by the capability.  
            TWQC_SET (2): If CapSet() is supported by the capability.  
            TWQC_GETDEFAULT (4): If CapGetDefault() is supported by the capability.  
            TWQC_GETCURRENT (8): If CapGetCurrent() is supported by the capability. 
            TWQC_RESET (16): If CapReset() is supported by the capability. 
            
            </param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The capability to query should be set in Capability property before calling CapIfSupported().
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapReset">
      <summary>
            Changes the Current Value of the capability specified by Capability property back to its power-on value.
            </summary>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Before invoking CapReset, Capability property should be set.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapSet">
      <summary>
            Sets the current capability using the container type specified by CapType property. 
            The current capability is specified by Capability property.
            </summary>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            For different capability container types, 
            The properties need to be set are different. 
            Before calling CapSet(), the corresponding properties should be set. 
            Refer to How to Negotiate Capability with Different Capability Container Types for details.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapSetFrame(System.Int32,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets the values of the specified frame.
            </summary>
      <param name="iIndex">
            Specifies the values of which frame to set. The index is 0-based.
            </param>
      <param name="fLeft">
            The value (in ICAP_UNITS) of the left-most edge of the specified frame.
            </param>
      <param name="fTop">
            The value (in ICAP_UNITS) of the top-most edge of the specified frame.
            </param>
      <param name="fRight">
            The value (in ICAP_UNITS) of the right-most edge of the specified frame.
            </param>
      <param name="fBottom">
            The value (in ICAP_UNITS) of the bottom-most edge of the specified frame.
            </param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CloseSource">
      <summary>
            Closes Data Source.
            </summary>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            CloseSource() will be called automatically when exiting the application, since Dynamic .NET TWAIN has built-in Wizard Mode.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CloseSourceManager">
      <summary>
            Closes and unloads Data Source Manager.
            </summary>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            CloseSourceManager() is called automatically when exiting the application, if it is not called explicitly by the application.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.DisableSource">
      <summary>
            Disables the source. If the source's user interface is displayed when the source is enabled, it will be closed.
            </summary>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            After DisableSource(), the Source is returned to State 4(Source is opened but not enabled), 
            where capability negotiation can be done again.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.EnableSource"><summary>
            Enables the source to accept image.
            </summary><returns>
            True indicates success. False indicates failure.
            </returns><exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            modified by soul
        </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FeedPage">
      <summary>
            Sets the Source to eject the current page and advance the next page in the document feeder into the feeder acquire area when IfFeederEnabled is true. 
            </summary>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after opening the Data Source (see OpenSource() method) and checking if the value of IfFeederEnabled property is true.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OpenSource"><summary>
            Loads the specified Source into main memory and starts its initialization, placing Dynamic .NET TWAIN into Capability Negotiation state. 
            If no source is specified (no SelectSource() or SelectSourceByIndex() is called), opens the default source.
            </summary><returns>True indicates success. False indicates failure. </returns><exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception><remarks>
            OpenSource() should be called prior to negotiating capability.
            If no source selection function is called before OpenSource(), OpenSource() opens the default source.
            The capability is available after OpenSource is called.
            </remarks>
            modified by soul
        </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OpenSourceManager">
      <summary>
             Loads and opens Data Source Manager.
             </summary>
      <returns>
             True indicates success. False indicates failure. 
             </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            If application identification information needs to be set, it should be set before OpenSourceManager().
            Dynamic .NET TWAIN has built-in Wizard Mode. With Wizard Mode, OpenSourceManager() can be called intelligently by other functions, such as EnableSource() or SelectSource(), if necessary. 
            OpenSourceManager() populates SourceNameItems property with a list of installed sources. SourceNameItems property along with other properties and methods can be used to customize source selection interface.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ResetImageLayout">
      <summary>
            Reverts the current image layout to the Data Source's default. 
            </summary>
      <returns>True indicates success. False indicates failure. </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RewindPage">
      <summary>
            Sets the Source to return the current page to the input side of the document feeder and feed the last page from the outside of the feeder back into the acquisition area if IfFeederEnabled is true. 
            </summary>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SelectSource"><summary>
            Brings up the TWAIN Data Source Manager's Source Selection User Interface (UI) so that user can choose which Data Source to be the current Source.
            </summary><returns>True indicates success. False indicates failure.</returns><exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
            // modified by soul
        </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SelectSourceByIndex(System.Int32)">
      <summary>
            Selects the index-the source in SourceNameItems property as the current source.
            </summary>
      <param name="iIndex">int iIndex. It is the index of SourceNameItems property.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>The index is 0-based.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetFileXFERInfo(System.String,Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat)">
      <summary>
            Sets file name and file format information used in File Transfer Mode
            </summary>
      <param name="strFileName">The name of the file to be used in transfer.
            </param>
      <param name="enumFileFormat">TWICapFileFormat type: a enumerated values indicates the format of the image. The followings are the allowed formats: TWFF_TIFF(0), TWFF_PICT(1), TWFF_BMP(2), TWFF_XBM(3), TWFF_JFIF(4), TWFF_FPX(5), TWFF_TIFFMULTI(6), TWFF_PNG(7), TWFF_SPIFF(8), TWFF_EXIF( 9)</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The SetFileXFERInfo() is valid only in File Transfer Mode.
            Before using any file format, negotiate ICAP_IMAGEFILEFORMAT capability to make sure if the Source can handle the desired image format.
            In File Transfer Mode, the image is transferred to the designated file directly and there is no image in Dynamic .NET TWAIN.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetImageLayout(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Sets the left, top, right, and bottom sides of the image layout rectangle for the current Data Source.
            </summary>
      <param name="fLeft">Float fLeft: specifies the floating point number for the left side of the image layout rectangle.</param>
      <param name="fTop">Float fTop: specifies the floating point number for the top side of the image layout rectangle.</param>
      <param name="fRight">Float fRight: specifies the floating point number for the right side of the image layout rectangle.</param>
      <param name="fBottom">Float fBottom: specifies the floating point number for the bottom side of the image layout rectangle.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>The image layout rectangle defines what portion of the Data Source's scanning area is acquired.</remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadCustomDSData(System.String)">
      <summary>
            Loads the configurations of the source's users interface saved by SaveCustomDSData or SaveCustomDSDataEx.
            </summary>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            You can set IfShowUI to true to display the user interface of the source.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadCustomDSDataEx(System.Byte[])">
      <summary>
            Loads the configurations of the source's users interface saved by SaveCustomDSData or SaveCustomDSDataEx.
            </summary>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            You can set IfShowUI to true to display the user interface of the source.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveCustomDSData(System.String)">
      <summary>
            Saves the settings of the source's user interface.
            </summary>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            You can set IfShowUI to true to display the user interface of the source.
            After saving the settings of the UI, you can use LoadCustomDSData or LoadCustomDSDataEx to restore the configurations.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveCustomDSDataEx(System.Byte[]@)">
      <summary>
            Saves the settings of the source's user interface.
            </summary>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            You can set IfShowUI to true to display the user interface of the source.
            After saving the settings of the UI, you can use LoadCustomDSData or LoadCustomDSDataEx to restore the configurations.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetDefaultImageLayout(System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
            Retrieves the left, top, right, and bottom sides of the current Data Source's default image layout rectangle.
            </summary>
      <param name="fLeft">The floating point number for the left side of the default image layout rectangle. </param>
      <param name="fTop">The floating point number for the top side of the default image layout rectangle.  </param>
      <param name="fRight">The floating point number for the right side of the default image layout rectangle.  </param>
      <param name="fBottom">The floating point number for the bottom side of the default  image layout rectangle. </param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The image layout rectangle defines what portion of the Data Source's scanning area is acquired.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetImageLayout(System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>
            Retrieves the left, top, right, and bottom sides of the image layout rectangle for the current Data Source.
            </summary>
      <param name="fLeft">The floating point number for the left side of the image layout rectangle.</param>
      <param name="fTop">The floating point number for the top side of the image layout rectangle.</param>
      <param name="fRight">The floating point number for the right side of the image layout rectangle.</param>
      <param name="fBottom">The floating point number for the bottom side of the image layout rectangle.</param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The image layout rectangle defines what portion of the Data Source's scanning area is acquired.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetSourceType(System.Int16)">
      <summary>
            Return the source type.
            </summary>
      <param name="sIndex">The index is 0-based and can not be greater than SourceCount property.</param>
      <returns>
            The source type.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            This property has a parameter.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SourceNameItems(System.Int16)">
      <summary>
            Holds an array of source names.
            </summary>
      <param name="sIndex">The index is 0-based and can not be greater than SourceCount property.</param>
      <returns>
            Source name.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            This property has a parameter.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetCapItems(System.Int32)">
      <summary>
            Returns an array of values of the capability specified by Capability property, when the value of the CapType property is TWON_ARRAY or TWON_ENUMERATION. 
            This is a runtime property.
            </summary>
      <param name="iIndex">The index is 0-based.</param>
      <returns>
            Capability property value.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling CapGet() method.
            This property has a parameter. The data type of the parameter is int and it is 0-based.
            The GetCapItems is used to present Double, Single(Float), Long, Integer and even Boolean types. For String type, please use GetCapItemsString. 
            When using Double type for Boolean type, 1 denotes true, 0 denotes false. The constant true/False of Visual Basic can NOT be used.
            This is very like CapValue property and CapValueString property, where CapValueString property is used to present String type and CapValue is used to present other types. CapValue property and CapValueString property are used when the container type is TWON_ONEVALUE.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetCapItems(System.Int32,System.Double)">
      <summary>
            Sets an array of values of the capability specified by Capability property, when the value of the CapType property is TWON_ARRAY or TWON_ENUMERATION. 
            This is a runtime property.
            </summary>
      <param name="iIndex">The index is 0-based.</param>
      <param name="dbValue">Capability property value.</param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            After setting this property, call CapSet() method to actually set the value.
            The SetCapItems property is used to present Double, Single(Float), Long, Integer and even Boolean types. For String type, please use SetCapItemsString. 
            When using Double type for Boolean type, 1 denotes true, 0 denotes false. The constant true/False of Visual Basic can NOT be used.
            This is very like CapValue property and CapValueString property, where CapValueString property is used to present String type and CapValue is used to present other types. CapValue property and CapValueString property are used when the container type is TWON_ONEVALUE.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetCapItemsString(System.Int32)">
      <summary>
            Returns or sets an array of values of the capability specified by Capability property, when the value of the CapType property is TWON_ARRAY or TWON_ENUMERATION.
            This is a runtime property.
            </summary>
      <param name="iIndex">The index is 0-based.</param>
      <returns>
            Capability property value.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling CapGet() method. 
            This property has a parameter. The data type of the parameter is int and it is 0-based.
            GetCapItemsString is used to return String type values. For other data types, use GetCapItems.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetCapItemsString(System.Int32,System.String)">
      <summary>
            Sets an array of values of the capability specified by Capability property, when the value of the CapType property is TWON_ARRAY or TWON_ENUMERATION.
            This is a runtime property.
            </summary>
      <param name="iIndex">The index is 0-based.</param>
      <param name="strValue">Capability property value.</param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            After setting this property, call CapSet() method to actually set the value.
            SetCapItemsString property is used to set String type values. For other data types, use SetCapItems property.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ChangeImageSize(System.Int16,System.Int32,System.Int32,Dynamsoft.DotNet.TWAIN.Enums.DWTInterpolationMethod)">
      <summary>
            Changes the display size of the image of a specified index in buffer.
            </summary>
      <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
      <param name="iNewWidth">
            Specifies the pixel width of the new image.
            </param>
      <param name="iNewHeight">
            Specifies the pixel height of the new image.
            </param>
      <param name="enumInterpolationMethod">
            Specifies the method to do interpolation.
            DWTInterpolationMethod Allowed Values
            Interpolation    Method
                 1           NearestNeighbor 
                 2           Bilinear 
                 3           Bicubic 
            
            </param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            ChangeImageSize() changes the display size of an image and replaces the original image with new one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ClearAllHTTPFormField">
      <summary>
            Clears all the web forms which are used for image uploading.
            </summary>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CopyToClipboard(System.Int16)">
      <summary>
            Copies the image of a specified index in buffer to clipboard in DIB format.
            </summary>
      <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            CopyToClipboard() makes a copy of the image to the clipboard. 
            If the application does not need the image in Dynamic .NET TWAIN any more, use CutToClipboard(), 
            which can save memory, especially when the image is large.
            The copied image is in DIB format.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Crop(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Crops the image of a specified index in buffer.
            </summary>
      <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
      <param name="iLeft">
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </param>
      <param name="iTop">
            Specifies the y-coordinate of the upper-left corner of the rectangle.
            </param>
      <param name="iRight">
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </param>
      <param name="iBottom">
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Crop() crops an image and replaces the original image with the cropped copy.
            If the application still needs the original image, use CropToClipboard().
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CropToClipboard(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Crops the image of a specified index in buffer to clipboard in DIB format.
            </summary>
      <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
      <param name="iLeft">
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </param>
      <param name="iTop">
            Specifies the y-coordinate of the upper-left corner of the rectangle.
            </param>
      <param name="iRight">
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </param>
      <param name="iBottom">
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            CropToClipboard() crops an image and makes a copy of the cropped image to the clipboard. If the application does not need the original image in Dynamic .NET TWAIN any more, use Crop().
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CutToClipboard(System.Int16)">
      <summary>
            Cuts the image of a specified index in buffer to clipboard in DIB format.
            </summary>
      <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            CutToClipboard() cuts the image to the clipboard.
            If the application still needs the image in Dynamic .NET TWAIN, 
            use CopyToClipboard().
            The image is in DIB format.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Flip(System.Int16)">
      <summary>
            Flips the image of a specified index in buffer.
            </summary>
      <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Flip() flips an image and replaces the original image with the flipped copy.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPDownload(System.String,System.String)">
      <summary>
            Downloads an image from the FTP server.
            </summary>
      <param name="strFTPServer">
            The name of the FTP server.
            </param>
      <param name="strFTPRemoteFile">
            The name of the file to be downloaded.
            It should be the relative path of the file on the FTP server.
            </param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Dynamic .NET TWAIN processes the image format according to the extension of the FTPRemoteFile.
            Dynamic .NET TWAIN supports the following types of image files: 
            Bitmap *.bmp, *.dib 
            JPEG *.JPG, *.JPEG, .*.JPE, *.JFIF 
            TIFF *.TIF, *.TIFF 
            PNG *.PNG 
            FTPRemoteFile parameter should include the FTP directory of the file.
            The image downloaded will be displayed in Dynamic .NET TWAIN, just as it is acquired from a TWAIN Data Source.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPDownloadEx(System.String,System.String,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
      <summary>
            Downloads an image from the FTP server.
            </summary>
      <param name="FTPServer">
             the name of the FTP server.
            </param>
      <param name="strFTPRemoteFile">
            The name of the file to be downloaded. It should be the relative path of the file on the FTP server.
            </param>
      <param name="enumImageType">
            The image format of the file to be downloaded.
            </param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Dynamic .NET TWAIN processes the image format according to the value of the ImageType.
            DWTImageFileFormat Allowed Values ImageType 
                 0    BMP 
                 1    JPEG 
                 2    TIFF 
                 3    PNG 
                 4    PDF 
            FTPRemoteFile parameter should include the FTP directory of the file.
            The image downloaded will be displayed in Dynamic .NET TWAIN, 
            just as it is acquired from a TWAIN Data Source.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUpload(System.String,System.Int16,System.String)">
      <summary>
            Uploads the image of a specified index in buffer to the FTP server.
            </summary>
      <param name="strFTPServer">
            The name of the FTP server.
            </param>
      <param name="sImageIndex">
            Specifies the index of image in buffer. The index is 0-based.
            </param>
      <param name="strFTPRemoteFile">
            The name of the file to be created on the FTP server. 
            It should be a relative path on the FTP server.
            </param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Dynamic .NET TWAIN processes the image format according to the extension of the FTPRemoteFile. 
            Dynamic .NET TWAIN supports the following types of image files: 
            Bitmap *.bmp, *.dib 
            JPEG *.JPG, *.JPEG, .*.JPE, *.JFIF 
            TIFF *.TIF, *.TIFF 
            PNG *.PNG 
            FTPRemoteFile parameter should include the FTP directory of the file.
            Write permission of the specified directory is needed for uploading.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUploadEx(System.String,System.Int16,System.String,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
      <summary>
             Uploads the image of a specified index in buffer to the FTP server as a specified image format.
             </summary>
      <param name="strFTPServer">
             The name of the FTP server.
             </param>
      <param name="sImageIndex">
             Specifies the index of image in buffer. The index is 0-based.
             </param>
      <param name="strFTPRemoteFile">
             The name of the file to be created on the FTP server. It should be a relative path on the FTP server.
             </param>
      <param name="enumImageType">
             The image format of the file to be created on the FTP server.
             </param>
      <returns>
             True indicates success. False indicates failure.
             </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             Dynamic .NET TWAIN processes the image format according to the value of the ImageType.
             DWTImageFileFormat Allowed Values ImageType 
             0 BMP 
             1 JPEG 
             2 TIFF 
             3 PNG 
             4 PDF 
             FTPRemoteFile parameter should include the FTP directory of the file.
             Write permission of the specified directory is needed for uploading.
             </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUploadAllAsMultiPageTIFF(System.String,System.String)">
      <summary>
            Uploads all images in buffer to the FTP server as a Multi-Page TIFF.
            </summary>
      <param name="strFTPServer">
            The name of the FTP server.
            </param>
      <param name="strFileName">
            The name of the image to be uploaded. It should be a relative path on the FTP server.
            </param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUploadAllAsPDF(System.String,System.String)">
      <summary>
            Uploads all images in buffer to the FTP server as a Multi-Page PDF.
            </summary>
      <param name="strFTPServer">
            The name of the FTP server.
            </param>
      <param name="strFileName">
            The name of the image to be uploaded. It should be a relative path on the FTP server.
            </param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RemoveAllImages">
      <summary>
            Removes all images in buffer.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            ThrowDynamsoftTwainException 
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RemoveImage(System.Int16)">
      <summary>
            Removes the image of a specified index in buffer.
            </summary>
      <param name="sImageIndexToBeDeleted">Specifies the index of image to be deleted in buffer. The index is 0-based.</param>
      <returns>True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If the CurrentImageIndexInBuffer is MaxImagesInBuffer -1, the image with index of CurrentImageIndexInBuffer will be removed,
            and the CurrentImageIndexInBuffer will be MaxImagesInBuffer -2; No image is highlighted in the control.
            If the CurrentImageIndexInBuffer is 0, the first image will be removed; and CurrentImageIndexInBuffer will still be 0.
            The indices of images will be changed accordingly. The image with index 0 will be selected.(This is also the case when the 
            index is set to another value except MaxImagesInBuffer -1)
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RotateLeft(System.Int16)">
      <summary>
            Rotates the image of a specified index in buffer by 90 degrees counter-clockwise.
            </summary>
      <param name="sImageIndex">Specifies the index of the image in buffer. The index is 0-based. </param>
      <returns>True indicates success. False indicates failure. </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>RotateLeft() rotates an image and replaces the original image with the rotated copy.</remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RotateRight(System.Int16)">
      <summary>
            Rotates the image of a specified index in buffer by 90 degrees clockwise.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.  </param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>RotateRight() rotates an image and replaces the original image with the rotated copy.</remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsBMP(System.String,System.Int16)">
      <summary>
            Saves the image of a specified index in buffer as a BMP file.
            </summary>
      <param name="strFileName">The name of the BMP file to be saved. It should be a local  path on the local disk.</param>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAllAsMultiPageTIFF(System.String)">
      <summary>
            Saves all images in buffer as a MultiPage TIFF file.
            </summary>
      <param name="strFileName">The name of the MultiPage TIFF file to be saved. It should be a local  path on the local disk.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Multi-Page TIFF is a built-in feature of Dynamic .NET TWAIN, no other DLLs are required.
            If IfTiffMultiPage is set to true, and there's a TIFF file with the same name exists on the local disk,
            the new scanned images will be added to the end of the existing TIFF file.
            If IfTiffMultiPage is set to false, the existing file with the same name will be replaced by the newly created one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAllAsPDF(System.String)">
      <summary>
            Saves all images in buffer as a Multi-Page PDF file.
            </summary>
      <param name="strFileName">The name of the Multi-Page PDF file to be saved. It should be a local  path on the local disk.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>Multi-Page PDF is a built-in feature of Dynamic .NET TWAIN, no other DLLs are required</remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsPDF(System.String,System.Int16)">
      <summary>
            Saves the image of a specified index in buffer as a PDF file.
            </summary>
      <param name="strFileName">The name of the PDF file to be saved. It should be a local  path on the local disk.</param>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            PDF is a built-in feature of Dynamic .NET TWAIN, no other DLLs are required.
            This method can not add a new acquired image into an existing PDF file. If you want to save all the acquired images in a Multi-Page PDF file, please use the SaveAllAsPDF method.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsPNG(System.String,System.Int16)">
      <summary>
            Saves the image of a specified index in buffer as a PNG file.
            </summary>
      <param name="strFileName">The name of the PNG file to be saved. It should be a local path on the local disk.</param>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsJPEG(System.String,System.Int16)">
      <summary>
            Saves the image of a specified index in buffer as a JPEG file.
            </summary>
      <param name="strFileName">The name of the JPEG file to be saved. It should be a local  path on the local disk.</param>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            JPEG compression is a built-in feature of Dynamic .NET TWAIN, no other DLLs are required.
            JPEG standard defines that only 256 gray-scaled image and 24 bit RGB image can be compressed as JPEG format.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsTIFF(System.String,System.Int16)">
      <summary>
            Saves the image of a specified index in buffer as a TIFF file.
            </summary>
      <param name="strFileName">The name of the TIFF file to be saved. It should be a local  path on the local disk.</param>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>TIFF is a built-in feature of Dynamic .NET TWAIN, no other DLLs are required.
            If IfTiffMultiPage is set to true, and there's a TIFF file with the same name exists on the local disk,
            the new scanned images will be added to the end of the existing TIFF file.
            If IfTiffMultiPage is set to false, the existing file with the same name will be replaced by the newly created one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetHTTPFormField(System.String,System.String)">
      <summary>
            Sets a text parameter of a web form. The text parameter is passed while uploading images.
            </summary>
      <param name="strFieldName">Sspecifies the name of a text field in web form.</param>
      <param name="strFieldValue">Specifies the value of a text field in web form.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetViewMode(System.Int16,System.Int16)">
      <summary>
            Sets the view mode that images are displayed in Dynamic .NET TWAIN. You can use this method to display multiple images in Dynamic .NET TWAIN.
            </summary>
      <param name="sHorizontalImageCount">Specifies how many columns can be displayed in Dynamic .NET TWAIN.</param>
      <param name="sVerticalImageCount">Specifies how many rows can be displayed in Dynamic .NET TWAIN.</param>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>The default is 1 by 1.
            When the view mode is set to -1 by -1, Dynamic .NET TWAIN only shows the current image. No scroll bar is provided to navigate to other images.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ShowImageEditor">
      <summary>
            Shows the GUI of Image Editor.
            </summary>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If the IfFitWindow property is set to true, 
            The image will fit the size of window when the Image Editor prompts;
            otherwise the image will be displayed in its full size.
            If there's no images in buffer, the ShowImageEditor control cannot be loaded.
            Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SwitchImage(System.Int16,System.Int16)">
      <summary>
            Switch two images of specified indices in buffer.
            </summary>
      <param name="sImageIndex1">Specifies the index of image in buffer. The index is 0-based. </param>
      <param name="sImageIndex2">Specifies the index of image in buffer. The index is 0-based. </param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetImageSize(System.Int16,System.Int32,System.Int32)">
      <summary>
            Returns the file size of the new image resized from the image of a specified index in buffer.
            </summary>
      <param name="sImageIndex">specifies the index of image in buffer. The index is 0-based.  </param>
      <param name="iWidth">specifies the pixel width of the new image. </param>
      <param name="iHeight">specifies the pixel height of the new image. </param>
      <returns>
            -1 indicates failure. Other values indicate success. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetImageSizeWithSpecifiedType(System.Int16,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
      <summary>
            Pre-calculates the file size of the local image file that is saved from an image of a specified index in buffer.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <param name="enumImageType">Specifies the type of an image file.
            DWTImageFileFormat Allowed Values  Image Type
            0               BMP, DIB 
            1               JPG, JPEG, JPE, JFIF 
            2               TIF, TIFF 
            3               PNG 
            4               PDF 
            </param>
      <returns>
            -1 indicates failure. Other values indicate success.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetViewMode(System.Int16@,System.Int16@)">
      <summary>
            Gets the view mode that images are displayed in Dynamic .NET TWAIN.
            </summary>
      <param name="sHorizontalImageCount">the short number for the columns can be displayed in Dynamic .NET TWAIN.  </param>
      <param name="sVerticalImageCount">the short number for the rows can be displayed in Dynamic .NET TWAIN.</param>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If the view mode is set to -1*-1, the returned value of sHorizontalImageCount is -1, and so is sVerticalImageCount.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPDownload(System.String,System.String)">
      <summary>
            Downloads an image from the HTTP server.
            </summary>
      <param name="strHTTPServer">the name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
      <param name="strHTTPRemoteFile">the name of the image to be downloaded. It should be the relative path of the file on the HTTP server.</param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Dynamic .NET TWAIN processes the image format according to the extension of the HTTPRemoteFile.
            Dynamic .NET TWAIN supports the following types of image files: 
                Bitmap *.bmp, *.dib 
                JPEG *.JPG, *.JPEG, .*.JPE, *.JFIF 
                TIFF *.TIF, *.TIFF 
                PNG *.PNG 
                PDF *.PDF 
            HTTPRemoteFile parameter should include the HTTP directory of the file.
            The image downloaded will be displayed in Dynamic .NET TWAIN, just as it is acquired from a TWAIN Data Source.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPDownloadEx(System.String,System.String,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
      <summary>
            Downloads an image from the HTTP server.
            </summary>
      <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
      <param name="strHTTPRemoteFile">The name of the image to be downloaded. It should be the relative path of the file on the HTTP server.</param>
      <param name="enumImageType">The image format of the file to be downloaded.</param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Dynamic .NET TWAIN processes the image format according to the value of the ImageType.
            DWTImageFileFormat Allowed Values  ImageType 
            WEBTW_BMP       BMP 
            WEBTW_JPG       JPEG 
            WEBTW_TIF       TIFF 
            WEBTW_PNG       PNG 
            WEBTW_PDF       PDF 
            HTTPRemoteFile parameter should include the HTTP directory of the file.
            The image downloaded will be displayed in Dynamic .NET TWAIN, just as it is acquired from a TWAIN Data Source.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPost(System.String,System.Int16,System.String,System.String)">
      <summary>
            Uploads the image of a specified index in buffer to the HTTP server through HTTP POST method.
            </summary>
      <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based. </param>
      <param name="strActionPage">The specified page for posting image files. This is the relative path of the page, not the absolute path. For example: "upload.asp", not "http://www.webserver.com/upload.asp". </param>
      <param name="strFileName">The name of the image to be uploaded. </param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Dynamic .NET TWAIN processes the image format according to the extension of the FileName. 
            Dynamic .NET TWAIN supports the following types of image files: 
            Bitmap *.bmp, *.dib 
            JPEG *.JPG, *.JPEG, .*.JPE, *.JFIF 
            TIFF *.TIF, *.TIFF 
            PNG *.PNG 
            PDF *.PDF
            The field name of the uploaded image is RemoteFile.
            IMPORTANT: Dynamic .NET TWAIN uses a special way to see if an image is uploaded and processed successfully by server. If the server returns 0 bytes, indicates success. Otherwise, indicates failure. In other words, when the uploaded image is processed successfully, the action page on the server should not return anything, even the "HTML". 
            When the uploaded file is in TIFF format, if the value of IfTiffMultiPage is true, and there's a TIFF file with the same name on the server, the newly uploaded images will be added into the existing file.
            If the value of IfTiffMultiPage is false, the old file will be replaced.
            If the uploaded file is in another format, and there's a file with the same name on the server, the newly uploaded file will replace the old one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPostEx(System.String,System.Int16,System.String,System.String,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
      <summary>
            Uploads the image of a specified index in buffer to the HTTP server as a specified image format through HTTP POST method.
            </summary>
      <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based. </param>
      <param name="strActionPage">The specified page for posting image files. This is the relative path of the page, not the absolute path. For example: "upload.asp", not "http://www.webserver.com/upload.asp". </param>
      <param name="strFileName">The name of the image to be uploaded.</param>
      <param name="enumImageType">The image format of the file to be created on the HTTP server.</param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Dynamic .NET TWAIN processes the image format according to the value of the ImageType.
            DWTImageFileFormat Allowed Values  ImageType 
            WEBTW_BMP       BMP 
            WEBTW_JPG       JPEG 
            WEBTW_TIF       TIFF 
            WEBTW_PNG       PNG 
            WEBTW_PDF       PDF 
            The field name of the uploaded image is RemoteFile.
            IMPORTANT: Dynamic .NET TWAIN uses a special way to see if an image is uploaded and processed successfully by server. If the server returns 0 bytes, indicates success. Otherwise, indicates failure. In other words, when the uploaded image is processed successfully, the action page on the server should not return anything, even the "html". 
            When the uploaded file is in TIFF format, if the value of IfTiffMultiPage is true, and there's a TIFF file with the same name on the server, the newly uploaded images will be added into the existing file.
            If the value of IfTiffMultiPage is false, the old file will be replaced.
            If the uploaded file is in another format, and there's a file with the same name on the server, the newly uploaded file will replace the old one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPut(System.String,System.Int16,System.String)">
      <summary>
            Uploads the image of a specified index in buffer to the HTTP server through HTTP PUT method.
            </summary>
      <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based. </param>
      <param name="strHTTPRemoteFile">The name of the image to be created on the HTTP server. It should a relative path on the web server.</param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Dynamic .NET TWAIN processes the image format according to the extension of the HTTPRemoteFile. 
            Dynamic .NET TWAIN supports the following types of image files: 
            Bitmap *.bmp, *.dib 
            JPEG *.JPG, *.JPEG, .*.JPE, *.JFIF 
            TIFF *.TIF, *.TIFF 
            PNG *.PNG 
            PDF *.PDF
            StrHTTPRemoteFile parameter should include the HTTP directory of the file.
            Write permission of the specified directory is needed for uploading.   
            When the uploaded file is in TIFF format, if the value of IfTiffMultiPage is true, and there's a TIFF file with the same name on the server, the newly uploaded images will be added into the existing file.
            If the value of IfTiffMultiPage is false, the old file will be replaced.
            If the uploaded file is in another format, and there's a file with the same name on the server, the newly uploaded file will replace the old one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPutEx(System.String,System.Int16,System.String,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
      <summary>
            Uploads the image of a specified index in buffer to the HTTP server as a specified image format through HTTP PUT method.
            </summary>
      <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based. </param>
      <param name="strHTTPRemoteFile">The name of the file to be created on the HTTP server. It should a relative path on the web server.</param>
      <param name="enumImageType">The image format of the file to be created on the HTTP server.</param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Dynamic .NET TWAIN processes the image format according to the value of the ImageType.
            DWTImageFileFormat Allowed Values  ImageType 
            WEBTW_BMP       BMP 
            WEBTW_JPG       JPEG 
            WEBTW_TIF       TIFF 
            WEBTW_PNG       PNG 
            WEBTW_PDF       PDF 
            HTTPRemoteFile parameter should include the HTTP directory of the file.
            Write permission of the specified directory is needed for uploading.   
            When the uploaded file is in TIFF format, if the value of IfTiffMultiPage is true, and there's a TIFF file with the same name on the server, the newly uploaded images will be added into the existing file.
            If the value of IfTiffMultiPage is false, the old file will be replaced.
            If the uploaded file is in another format, and there's a file with the same name on the server, the newly uploaded file will replace the old one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadAllThroughPostAsMultiPageTIFF(System.String,System.String,System.String)">
      <summary>
            Uploads all images in buffer to the HTTP server through HTTP Post method as Multi-Page TIFF.
            </summary>
      <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
      <param name="strActionPage">The specified page for posting image files. This is the relative path of the page, not the absolute path. </param>
      <param name="strFileName">The name of the image to be uploaded. </param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The field name of the uploaded image is RemoteFile.
            IMPORTANT: Dynamic .NET TWAIN uses a special way to see if an image is uploaded and processed successfully by server. If the server returns 0 bytes, indicates success. Otherwise, indicates failure. In other words, when the uploaded image is processed successfully, the action page on the server should not return anything, even the HTML". 
            If the value of IfTiffMultiPage is true,and there's a TIFF file with the same name on the server, the newly uploaded images will be added into the existing file.
            If the value of IfTiffMultiPage is false, the old file will be replaced.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadAllThroughPostAsPDF(System.String,System.String,System.String)">
      <summary>
            Uploads all images in buffer to the HTTP server through HTTP Post method as Multi-Page PDF.
            </summary>
      <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
      <param name="strActionPage">The specified page for posting image files. This is the relative path of the page, not the absolute path. </param>
      <param name="strFileName">The name of the image to be uploaded. </param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The field name of the uploaded image is RemoteFile.
            IMPORTANT: Dynamic .NET TWAIN uses a special way to see if an image is uploaded and processed successfully by server. If the server returns 0 bytes, indicates success. Otherwise, indicates failure. In other words, when the uploaded image is processed successfully, the action page on the server should not return anything, even the "HTML". 
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadAllThroughPutAsMultiPageTIFF(System.String,System.String)">
      <summary>
            Uploads all images in buffer to the HTTP server through HTTP Put method as Multi-Page TIFF.
            </summary>
      <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
      <param name="strFileName">The name of the image to be uploaded. </param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If the value of IfTiffMultiPage is true,and there's a TIFF file with the same name on the server, the newly uploaded images will be added into the existing file.
            If the value of IfTiffMultiPage is false, the old file will be replaced.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadAllThroughPutAsPDF(System.String,System.String)">
      <summary>
             Uploads all images in buffer to the HTTP server through HTTP Put method as Multi-Page PDF.
             </summary>
      <param name="strHTTPServer">The name of the HTTP server.It should be only the name of the HTTP server, without "http://" or "https://".Port number is not needed here.</param>
      <param name="strFileName">The name of the image to be uploaded. </param>
      <returns>
             True indicates success. False indicates failure. 
             </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IsBlankImage(System.Int16)">
      <summary>
            Detects whether an image is blank.
            </summary>
      <param name="sImageIndex">specifies the index of image in buffer. The index is 0-based.  </param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            IsBlankImage() detects whether an image is blank.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IsBlankImage(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Detects whether a certain area on an image is blank.
            </summary>
      <param name="sImageIndex">specifies the index of image in the buffer. The index is 0-based.</param>
      <param name="iLeft">specifies the x-coordinate of the upper-left corner of the rectangle for detecting.</param>
      <param name="iTop">specifies the y-coordinate of the upper-left corner of the rectangle for detecting.</param>
      <param name="iRight">specifies the x-coordinate of the lower-right corner of the rectangle for detecting.</param>
      <param name="iBottom">specifies the y-coordinate of the lower-right corner of the rectangle for detecting.</param>
      <param name="bFuzzyMatch">specifies whether use fuzzy matching when detecting.</param>
      <returns>True indicates that the selected area on an image is blank. False indicates that the selected area is not blank.
            When an error occurs and the IfThrowException<see cref="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfThrowException"/> property us true, an exception will be thrown.
            When false is returned or an exception is thrown, check the ErrorCode<see cref="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ErrorCode"/> property and the ErrorString<see cref="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ErrorString"/> property for error information.</returns>
      <remarks>If you would like to check whether an image is blank, you can use the IsBlankImage<see cref="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IsBlankImage(System.Int16)"/> method</remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadDibFromClipboard">
      <summary>
            Loads a DIB format image from Clipboard into Dynamic .NET TWAIN.
            </summary>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The loaded image will be displayed in Dynamic .NET TWAIN.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadImage(System.String)">
      <summary>
            Loads an image into the Dynamic .NET TWAIN. It supports loading encrypted pdf files.
            </summary>
      <param name="strFileName">The name of the image to be loaded.</param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Dynamic .NET TWAIN processes the image format according to the extension of the FileName. 
            Dynamic .NET TWAIN supports the following types of image files: 
            Bitmap *.bmp, *.dib 
            JPEG *.JPG, *.JPEG, .*.JPE, *.JFIF 
            TIFF *.TIF, *.TIFF 
            PNG *.PNG 
            PDF *.PDF
            The loaded image will be displayed in Dynamic .NET TWAIN.     
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadImageEx(System.String,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
      <summary>
            Loads an image into Dynamic .NET TWAIN. It supports loading encrypted pdf files.
            </summary>
      <param name="strFileName">The name of the image to be loaded. It should be the absolute path of the image file on the local disk.</param>
      <param name="enumImageType">The image format of the file to be loaded.</param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Dynamic .NET TWAIN processes the image format according to the value of ImageType.<br/>
            Allowed Values  ImageType <br/>
            WEBTW_BMP       BMP <br/>
            WEBTW_JPG       JPEG <br/>
            WEBTW_TIF       TIFF <br/>
            WEBTW_PNG       PNG <br/>
            WEBTW_PDF       PDF <br/>
            The loaded image will be displayed in Dynamic .NET TWAIN.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Mirror(System.Int16)">
      <summary>
             Mirrors the image of a specified index in buffer.
             </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.  </param>
      <returns>
             True indicates success. False indicates failure. 
             </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            Mirror() mirrors an image and replaces the original image with the mirrored copy.
             </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Picture(System.Int16)">
      <summary>
            Returns the Picture object of the image of a specified index in buffer.
            </summary>
      <param name="sImageIndex">Specifies the index of the image in buffer. The index is 0-based.  </param>
      <returns>
            Not NULL indicates success. NULL indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The Picture property implements the IPictureDisp interface.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadImageFromBytes(System.Byte[],Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
      <summary>
            Loads image from a byte array with the specified file format.
            </summary>
      <param name="byBuffer">A byte array of the image data.</param>
      <param name="enumImageFileFormat">DWTImageFileFormat type, specifies the file format</param>
      <returns>
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveImageToBytes(System.Int16,Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat)">
      <summary>
            Saves the image of a specified index in buffer to a byte array in the specified file format.
            </summary>
      <param name="sImageIndex">Specifies the index of the image in buffer. The index is 0-based.</param>
      <param name="enumImageFileFormat">DWTImageFileFormat type, specifies the file format</param>
      <returns>
            A byte array where the image will be saved.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetImage(System.Int16)">
      <summary>
            Get the image of a specified index in buffer.
            </summary>
      <param name="sImageIndex">Specifies the index of the image in buffer. The index is 0-based.</param>
      <returns>
            Return an Image. Note: if you are using DynamicDotNetTWAIN.Wpf.dll, the returned value will be BitmapImage.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetImage(System.Int16,System.Drawing.Image)">
      <summary>
            Replace the image of a specified index in buffer.
            </summary>
      <param name="sImageIndex">Specifies the index of the image in buffer. The index is 0-based.</param>
      <param name="img">The new image. Note: if you are using DynamicDotNetTWAIN.Wpf.dll, the data type here will be BitmapImage.</param>
      <returns>
            Return an Image.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsMultiPageTIFFToBytes(Dynamsoft.DotNet.TWAIN.IndexList)">
      <summary>
            Saves the images of the specified indices in buffer to a MultiPage TIFF byte array.
            </summary>
      <param name="aryIndex">Specifies a list of index of image in buffer. The index is 0-based.</param>
      <returns>
            A byte array where the image will be saved.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAllAsMultiPageTIFFToBytes">
      <summary>
            Saves all images in buffer to a MultiPage TIFF byte array.
            </summary>
      <returns>
            A byte array where the image will be saved.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsMultiPagePDFToBytes(Dynamsoft.DotNet.TWAIN.IndexList)">
      <summary>
            Saves the images of the specified indices in buffer to a MultiPage PDF byte array.
            </summary>
      <param name="aryIndex">Specifies a list of index of image in buffer. The index is 0-based.</param>
      <returns>
            A byte array where the image will be saved.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAllAsPDFToBytes">
      <summary>
            Saves all images in buffer to a MultiPage PDF byte array.
            </summary>
      <returns>
            A byte array where the image will be saved.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsMultiPageTIFF(System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
      <summary>
            Saves several images in buffer as a multi-page TIFF file.
            </summary>
      <param name="strFileName">
            String strFileName:the name of the MultiPage TIFF file to be saved. It should be an absolute path.
            </param>
      <param name="aryIndex">
            IndexList aryIndex:an array. It contains the indices of images that need to be saved.
            </param>
      <returns>True indicates success. False indicates failure. </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If IfTiffMultiPage is set to true, and there's a TIFF file with the same name exists on the local disk,
            the new scanned images will be added to the end of the existing TIFF file.
            If IfTiffMultiPage is set to false, the existing file with the same name will be replaced by the newly created one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaveAsMultiPagePDF(System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
      <summary>
            Saves several images in buffer as a multi-page PDF file.
            </summary>
      <param name="strFileName">
            String strFileName:the name of the Multi-Page PDF file to be saved. It should be a local path on the local disk.
            </param>
      <param name="aryIndex">
            IndexList aryIndex:an array. It contains the indices of images that need to be saved.
            </param>
      <returns>True indicates success. False indicates failure. </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a PDF file with the same file name on the local disk, the old PDF file will be replaced by the newly saved one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUploadAsMultiPageTIFF(System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
      <summary>
            Uploads several images in buffer as a multi-page TIFF file to the FTP server.
            </summary>
      <param name="strFTPServer">
            String strFTPServer:the name of the FTP server.
            </param>
      <param name="strFileName">
            String strFileName:the name of the image to be uploaded. It should be a relative path on the FTP server.
            </param>
      <param name="aryIndex">
            IndexList aryIndex:an array. It contains the indices of images that need to be saved.
            </param>
      <returns>True indicates success. False indicates failure. </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a TIFF file with the same file name on the FTP server, the old TIFF file will be replaced by the newly uploaded one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUploadAsMultiPagePDF(System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
      <summary>
            Uploads several images in buffer as a multi-page PDF file to the FTP server.
            </summary>
      <param name="strFTPServer">
            String strFTPServer:the name of the FTP server.
            </param>
      <param name="strFileName">
            String strFileName:the name of the image to be uploaded. It should be a relative path on the FTP server.
            </param>
      <param name="aryIndex">IndexList aryIndex:an array. It contains the indices of images that need to be saved.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a PDF file with the same file name on the FTP server, the old PDF file will be replaced by the newly uploaded one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPostAsMultiPageTIFF(System.String,System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
      <summary>
            Uploads several images in buffer as a multi-page TIFF file to the HTTP server via HTTP post method.
            </summary>
      <param name="strHTTPServer">The name of the HTTP server.</param>
      <param name="strActionPage">
            The specified page for posting image files. This is the relative path of the page, not the absolute path.</param>
      <param name="strFileName">string strFileName:the name of the image to be uploaded. </param>
      <param name="aryIndex">IndexList aryIndex:an array. It contains the indices of images that need to be saved.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a TIFF file with the same file name on the HTTP server, the old TIFF file will be replaced by the newly uploaded one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPostAsMultiPagePDF(System.String,System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
      <summary>
            Uploads several images in buffer as a multi-page PDF file to the HTTP server via HTTP post method.
            </summary>
      <param name="strHTTPServer">string strHTTPServer:the name of the HTTP server.</param>
      <param name="strActionPage">
            The specified page for posting image files. This is the relative path of the page, not the absolute path. </param>
      <param name="strFileName">string strFileName:the name of the image to be uploaded. </param>
      <param name="aryIndex">IndexList aryIndex:an array. It contains the indices of images that need to be saved.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a PDF file with the same file name on the HTTP server, the old PDF file will be replaced by the newly uploaded one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPutAsMultiPageTIFF(System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
      <summary>
            Uploads several images in buffer as a multi-page TIFF file to the HTTP server via HTTP put method.
            </summary>
      <param name="strHTTPServer">The name of the HTTP server.</param>
      <param name="strFileName">The name of the image to be uploaded. </param>
      <param name="aryIndex">IndexList aryIndex:an array. It contains the indices of images that need to be saved.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a TIFF file with the same file name on the HTTP server, the old TIFF file will be replaced by the newly uploaded one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUploadThroughPutAsMultiPagePDF(System.String,System.String,Dynamsoft.DotNet.TWAIN.IndexList)">
      <summary>
            Upload several images in buffer as a multi-page PDF file to the HTTP server via HTTP put method.
            </summary>
      <param name="strHTTPServer">string strHTTPServer:the name of the HTTP server.</param>
      <param name="strFileName">string strFileName:the name of the image to be uploaded. </param>
      <param name="aryIndex">IndexList aryIndex:an array. It contains the indices of images that need to be saved.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            If there's a PDF file with the same file name on the HTTP server, the old PDF file will be replaced by the newly uploaded one.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CopyFrameToClipboard(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
             Copies the image data in the specified area to the system clipboard in DIB format.
             </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <param name="iLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="iTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="iRight">Specifies the x-coordinate of the lower-right corner of the rectangle.</param>
      <param name="iBottom">Specifies the y-coordinate of the lower-right corner of the rectangle.</param>
      <returns>
             True indicates success. False indicates failure. 
             </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CutFrameToClipboard(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
             Cuts the image data in the specified area to the system clipboard in DIB format.
             </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <param name="iLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="iTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="iRight">Specifies the x-coordinate of the lower-right corner of the rectangle.</param>
      <param name="iBottom">Specifies the y-coordinate of the lower-right corner of the rectangle.</param>
      <returns>
             True indicates success. False indicates failure.
             </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             The fill color can be assigned by calling BackgroundFillColor.This method cuts the image data of selected
             area into the clipboard. The valid area is the intersection of specified area(defined by the input parameters) 
             and the whole image.If the intersection is invalid, an error will be thrown out.
             </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Erase(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
             Clears the specified area of a specified image, and fill the area with the fill color.
             </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <param name="iLeft">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="iTop">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="iRight">Specifies the x-coordinate of the lower-right corner of the rectangle.</param>
      <param name="iBottom">Specifies the y-coordinate of the lower-right corner of the rectangle.</param>
      <returns>
             True indicates success. False indicates failure.
             </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             The fill color can be defined by BackgroundFillColor. The valid area is the intersection of 
             specified area(defined by the input parameters) and the whole image.If the intersection is 
             invalid, an error will be throwed out.
             </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MoveImage(System.Int16,System.Int16)">
      <summary>
            Moves a specified image.
            </summary>
      <param name="sSourceImageIndex">Specifies the index of image in buffer. The index is 0-based. </param>
      <param name="sTargetImageIndex">Specifies the index of image in buffer. The index is 0-based. </param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RemoveImages(Dynamsoft.DotNet.TWAIN.IndexList)">
      <summary>
            Deletes the images of specified indices in the array.
            </summary>
      <param name="aryIndex">Specifies the indices of image in buffer. The index is 0-based.
            ShortArray: an array with objects of short type. Its length is variable.
            </param>
      <returns>
            True indicates success. False indicates failure.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If aryIndex contains any invalid index, error message will be written into the ErrorString property and no image will be saved. But if aryIndex contains repeated valid index, 
            the repeated index will be filtered, only keep one index.
            After the selected image is deleted, the following images's indices will change accordingly.
            If the original CurrentImageIndexInBuffer &gt;= HowManyImagesInBuffer, CurrentImageIndexInBuffer = HowManyImagesInBuffer;
            Also the image will be selected.
            If the original CurrentImageIndexInBuffer is less than HowManyImagesInBuffer, CurrentImageIndexInBuffer will not change;
            also the image with index of CurrentImageIndexInBuffer will be selected.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetBarcodeText(System.Int32)">
      <summary>
            Gets barcode content by specified index. It's only valid in OnPostTransfer event.
            </summary>
      <param name="barcodeIndex">Specifies the index of barcode in image. The index is 0-based.</param>
      <returns>
            Barcode content.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            An empty string will be returned, if the Source doesn't support barcode detection or the image data doesn't contain barcode.
            GetBarcodeText method, along with other properties about information of the current image, is valid only in OnPostTransfer event.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetBarcodeInfo(Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode,System.Int32)">
      <summary>
            Gets barcode type value by specified index and type. The index is 0-based. It's only valid in OnPostTransfer event.
            </summary>
      <param name="barcodeInfoType">Defined in TWAIN specification.</param>
      <param name="barcodeIndex">Specifies the index of barcode in image. The index is 0-based.</param>
      <returns>
            No limit
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            GetBarcodeInfo method, along with other properties about information of the current image, is valid only in OnPostTransfer event.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Rotate(System.Int16,System.Double,System.Boolean,Dynamsoft.DotNet.TWAIN.Enums.DWTInterpolationMethod)">
      <summary>
            Rotates the image of a specified index in buffer by specified angle.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.  </param>
      <param name="dbAngle">Specifies the rotation angle.</param>
      <param name="bKeepSize">Keep size or not.</param>
      <param name="dwtInterpolationMethod">Interpolation method.</param>
      <returns>True indicates success. False indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            You can specify the fill color by BackgroundFillColor property.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Print">
      <summary>
            Shows the GUI of Image Printer with default printer settings.
            </summary>
      <returns>
            Boolean.
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Depending on the property IfShowPrintUI, the User Interface of the printer may or may not show when you invoke this method.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>
            Shows the GUI of Image Printer with custom printer settings.
            </summary>
      <param name="printerSettings">Custom printer settings</param>
      <returns>
            Boolean.
            True indicates success. False indicates failure. 
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Depending on the property IfShowPrintUI, the User Interface of the printer may or may not show when you invoke this method.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetAllAnnotationDataList(System.Int16,System.Collections.Generic.List{Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData}@)">
      <summary>
            Returns all the data of the annotations on a specific image.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LoadAnnotationDataList(System.Int16,System.Collections.Generic.List{Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData})">
      <summary>
            Loads annotation data to a specific image from a data list.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetSelectedAnnotationList(System.Int16,System.Collections.Generic.List{Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData}@)">
      <summary>
            Returns the data of the selected annotations on a specific image.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.DeleteAnnotations(System.Int16,System.Collections.Generic.List{Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData})">
      <summary>
            Deletes the annotations on a specific image which are listed in the parameter <b>aryAnnotation</b>.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CreateAnnotation(System.Int16,Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData)">
      <summary>
            Creates an annotation on a specific image according to the annotation definition <b>objAnnotation</b>.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.UpdateAnnotation(System.Int16,Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData,Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData)">
      <summary>
            Updates an annotation on a specific image with the new annotation definition <b>objNewAnnotation</b>.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ChangeAnnotationPosition(System.Int16,Dynamsoft.DotNet.TWAIN.Annotation.AnnotationData,Dynamsoft.DotNet.TWAIN.Enums.DWTAnnotationChangePosition)">
      <summary>
            Change the position of an annotation on a specific image to a new position according to <b>DWTAnnotationChangePosition</b>.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Invert(System.Int16)">
      <summary>
            Invert the color of a specific image.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GrayScale(System.Int16)">
      <summary>
            Convert a specific image to a grayscale image.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.DisplayPropertyPage">
      <summary>
            </summary>
      <remarks>
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetVideoContainer(System.Windows.Forms.Control)">
      <summary>
            Only available when IfShowUI is true.
            The default value is null, the default UI will show in this situation.
            If set this method with designated control, the designated control will show instead default UI.
            </summary>
      <param name="control"/>
      <remarks>
            Don't set any webcam capability before this method, such as ResolutionForCam, Saturation, Hue, etc
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ResizeVideoWindow(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Resize the video window to adapt its container.
            </summary>
      <param name="left"/>
      <param name="top"/>
      <param name="width"/>
      <param name="height"/>
      <remarks>
            Please note use this method/property after calling SelectSource method and it's Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ReadBarcode(System.Int16,Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat)">
      <summary>
            Read the barcode with the specified barcode format from the image of a specified index in buffer.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <param name="format">The barcode format. Any combination of permitted format is acceptable for the format parameter.</param>
      <returns>Non-empty result indicates success. Empty result indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ReadBarcode(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat)">
      <summary>
            Read the barcode with the specified barcode format from the image of a specified index in buffer.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <param name="iLeft">
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </param>
      <param name="iTop">
            Specifies the y-coordinate of the upper-left corner of the rectangle.
            </param>
      <param name="iRight">
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </param>
      <param name="iBottom">
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </param>
      <param name="format">The barcode format. Any combination of permitted format is acceptable for the format parameter.</param>
      <returns>Non-empty result indicates success. Empty result indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ReadBarcode(Dynamsoft.DotNet.TWAIN.IndexList,Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat)">
      <summary>
            Read the barcode with the specified barcode format from the image of a specified indices in buffer.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <param name="format">The barcode format. Any combination of permitted format is acceptable for the format parameter.</param>
      <returns>Non-empty result indicates success. Empty result indicates failure.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OCR(Dynamsoft.DotNet.TWAIN.IndexList)">
      <summary>
            Do OCR with the image of a specified indices in buffer, and return PDF stream or ASCII string.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <returns>Non-NULL indicates success. NULL indicates failure. Returned format is specified by <see cref="T:Dynamsoft.DotNet.TWAIN.OCR.ResultFormat"/> property.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OCR(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)"><summary>
            Do OCR on the given rectangle on a specified image, and return PDF stream or ASCII string.
            </summary><param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
             /// <param name="iLeft">
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </param>
            <param name="iTop">
            Specifies the y-coordinate of the upper-left corner of the rectangle.
            </param>
            <param name="iRight">
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </param>
            <param name="iBottom">
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </param>
            <returns>Non-NULL indicates success. NULL indicates failure. Returned format is specified by <see cref="T:Dynamsoft.DotNet.TWAIN.OCR.ResultFormat"/> property.</returns>
            <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
        </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OCR(System.String[])">
      <summary>
            Do OCR with the image of a specified filenames.
            </summary>
      <param name="sImageIndex">Specifies the the image of a specified filenames. </param>
      <returns>Non-NULL indicates success. NULL indicates failure. Returned format is specified by <see cref="T:Dynamsoft.DotNet.TWAIN.OCR.ResultFormat"/> property.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetOCRResultPageSetCount">
      <summary>
            Returns how many pagesets there are in the OCR result.
            </summary>
      <returns>Int</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetOCRResultPageCount(System.Int32)">
      <summary>
            Returns the number of pages that are OCR'ed in a specified pageset.
            </summary>
      <param name="iPageSetIndex">Specifies the index of the selected pageset.</param>
      <returns>Int</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetOCRResultLineCount(System.Int32,System.Int32)">
      <summary>
            Returns how many lines there are in the OCR result for a specified page in a pageset.
            </summary>
      <param name="iPageSetIndex">Specifies the index of the selected pageset.</param>
      <param name="iPageIndex">Specifies the index of the page in the pageset.</param>
      <returns>Int</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetOCRResultWordsCount(System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns how many words there are in a specified line in a specified page of a pageset.
            </summary>
      <param name="iPageSetIndex">Specifies the index of the selected pageset.</param>
      <param name="iPageIndex">Specifies the index of the page in the pageset.</param>
      <param name="iLineIndex">Specifies the index of the line in the page.</param>
      <returns>Int</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetOCRResultLineRect(System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the coordinates for the rectangle that contains a specified line in a specified page of a pageset.
            </summary>
      <param name="iPageSetIndex">Specifies the index of the selected pageset.</param>
      <param name="iPageIndex">Specifies the index of the page in the pageset.</param>
      <param name="iLineIndex">Specifies the index of the line in the page.</param>
      <returns>string in the format of "left,top,right,bottom". For example:"12,25,200,50".</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetOCRResultWordsRect(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the coordinates for the rectangle that contains a specified word.
            </summary>
      <param name="iPageSetIndex">Specifies the index of the selected pageset.</param>
      <param name="iPageIndex">Specifies the index of the page in the pageset.</param>
      <param name="iLineIndex">Specifies the index of the line in the page.</param>
      <param name="iWordsIndex">Specifies the index of the word in the line.</param>
      <returns>string in the format of "left,top,right,bottom". For example:"12,25,200,50".</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetOCRResultWordsFontSize(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the font size of a specified word in the OCR result.
            </summary>
      <param name="iPageSetIndex">Specifies the index of the selected pageset.</param>
      <param name="iPageIndex">Specifies the index of the page in the pageset.</param>
      <param name="iLineIndex">Specifies the index of the line in the page.</param>
      <param name="iWordsIndex">Specifies the index of the word in the line.</param>
      <returns>int</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetOCRResultWordsFontName(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the font name of a specified word in the OCR result.
            </summary>
      <param name="iPageSetIndex">Specifies the index of the selected pageset.</param>
      <param name="iPageIndex">Specifies the index of the page in the pageset.</param>
      <param name="iLineIndex">Specifies the index of the line in the page.</param>
      <param name="iWordsIndex">Specifies the index of the word in the line.</param>
      <returns>string</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetOCRResultWordsText(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the text of a specified word in the OCR result.
            </summary>
      <param name="iPageSetIndex">Specifies the index of the selected pageset.</param>
      <param name="iPageIndex">Specifies the index of the page in the pageset.</param>
      <param name="iLineIndex">Specifies the index of the line in the page.</param>
      <param name="iWordsIndex">Specifies the index of the word in the line.</param>
      <returns>string</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ConvertPDFToImage(System.String,System.Single)">
      <summary>
            Converts a local PDF file into an image with specified resolution.
            This method is defined in the DynamicPDF.dll/DynamicPDFx64.dll assembly. 
            To use this method, you need to use PDFRasterizerDllPath property to specify the PDF Rasterizer dll path first.
            </summary>
      <param name="strFileName">The name of the PDF to be converted. It should be the absolute path of the PDF on the local disk.</param>
      <param name="fResolution">Specifies the output image resolution.</param>
      <returns>bool</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ConvertPDFToImage(System.Byte[],System.Single)">
      <summary>
            Converts the byte array of a PDF file into an image with specified resolution. 
            This method is defined in the DynamicPDF.dll/DynamicPDFx64.dll assembly. 
            To use this method, you need to use PDFRasterizerDllPath property to specify the PDF Rasterizer dll path first.
            </summary>
      <param name="bytFile">The byte array of a PDF file.</param>
      <param name="fResolution">Specifies the output image resolution.</param>
      <returns>bool</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetSkewAngle(System.Int16)">
      <summary>
            Calculate the skew angle of the image of a specified index in buffer.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.  </param>
      <returns>The skew angle of the image.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetSkewAngle(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculate the skew angle of the image of a specified index in buffer.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.  </param>
      <param name="iLeft">
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </param>
      <param name="iTop">
            Specifies the y-coordinate of the upper-left corner of the rectangle.
            </param>
      <param name="iRight">
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </param>
      <param name="iBottom">
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </param>
      <returns>The skew angle of the image.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.EnableSourceUI"><summary>
            Display the user interface of the source to change and save the settings for DPI, paper size, etc.
            </summary><returns>
            True indicates success. False indicates failure.
            </returns><exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception><remarks>
            The method is only used in scanner module.
            </remarks>
            modified by ellie
        </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetImageIndexByGuid(System.Guid)">
      <summary>
            Get the corresponding image index with GUID.
            </summary>
      <param name="guid">Specifies the GUID of the image in buffer.</param>
      <returns>
            Return an index (short). -1 indicates there is no such GUID exist.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetImageGuidByIndex(System.Int16)">
      <summary>
            Get the corresponding image GUID with index.
            </summary>
      <param name="idx">Specifies the index of the image in buffer.</param>
      <returns>
            Return a GUID. GUID.Empty indicates there is no such index exist.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetImageGuidByIndex(System.Int16,System.Guid)">
      <summary>
            Set the image GUID with the corresponding index.
            </summary>
      <param name="idx">Specifies the index of the image in buffer.</param>
      <param name="guid">The GUID value for the image in buffer.</param>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetSelectionRectPosition(System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Programmatically select an area or resize selection rectangle. 
            Note: To enable this function, MouseShape property should be set to false.
            </summary>
      <param name="sImageIndex">Specifies the index of the image in buffer.</param>
      <param name="iLeft">The X axis of the left border.</param>
      <param name="iTop">The Y axis of the top border.</param>
      <param name="iRight">The X axis of the right border.</param>
      <param name="iBottom">The Y axis of the bottom border.</param>
      <returns>
            Return a boolean value that indicates whether the operation succeeded or not.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GetSelectionRect(System.Int16)">
      <summary>
            Get the selected area on the specified image in buffer.
            </summary>
      <param name="sImageIndex">Specifies the index of the image in buffer.</param>
      <returns>Return a Rectangle value that indicates the selected area. Rectangle.Empty means that no area is selected on the specified index image.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ClearSelectionRect(System.Int16)">
      <summary>
            Clear the selected area on the specified image in buffer. 
            </summary>
      <param name="sImageIndex">Specifies the index of the image in buffer.</param>
      <returns>Return a boolean value that indicates whether the operation succeeded or not.</returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RotateVideo(Dynamsoft.DotNet.TWAIN.Enums.EnumVideoRotateType)">
      <summary>
             Rotates the video which is displayed by 90,180 or 270 degrees.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FocusOnArea(System.Drawing.Rectangle)">
      <summary>
            Focus on a specified Area,make the Area clearer. 
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If use this method, make sure the camera support focus.
            </remarks>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SetPDFResolution(System.UInt32)">
      <summary>
            Sets the output image resolution of the PDF Rasterizer.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remark>
            The default value is 200.We recommend that you set a value smaller than 300,otherwise it might slow down the program.
            </remark>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MergePDFFiles(System.String,System.String[])">
      <summary>
            Merges PDF files on disk and save the merged document to a new file.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remark>
             The files must not be encrypted.
             </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ScanInNewThread">
      <summary>
            Acquire image in a new separate thread
            </summary>
      <remarks>
            ScanInNewThread should be called prior to negotiating capability.        
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ScanInNewProcess">
      <summary>
            Acquire image in a new separate process
            </summary>
      <remarks>
            ScanInNewProcess should be called prior to negotiating capability.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HookMessage">
      <summary>
            Hook thread message
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnImageAreaDeselected">
      <summary>
            Occurs when the selected area of the specified image is deselected and the value of the <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.MouseShape"/> property is set to false.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnImageAreaSelected">
      <summary>
            Occurs when an area of the specified image is selected and the value of the <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.MouseShape"/> property is set to false.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnInternetTransferPercentage">
      <summary>
            Occurs when uploading or downloading images via HTTP or FTP.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnWaitForEnd">
      <summary>
            Occurs when doing OCR or Barcode.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnMouseClick">
      <summary>
            Occurs when the mouse clicks on an image.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnMouseDoubleClick">
      <summary>
            Occurs when the mouse double clicks on an image.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnMouseMove">
      <summary>
            Occurs when the mouse moves onto an image.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnMouseRightClick">
      <summary>
            Occurs when the mouse right clicks on an image.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnMouseRightClickEx">
      <summary>
            Occurs when the mouse right clicks on an image.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnPostAllTransfers">
      <summary>
            Occurs after all image are scanned.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnPostTransfer">
      <summary>
            Occurs when each image is scanned.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnPreAllTransfers">
      <summary>
            Occurs before all images are scanned.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnPreTransfer">
      <summary>
            Occurs before each image is scanned.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnTopImageInTheViewChanged">
      <summary>
            Occurs when the current top image displayed in Dynamic .Net TWAIN is changed and the view mode is NOT set to -1 by -1.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnTransferCancelled">
      <summary>
            Occurs when the transfer is cancelled by the user.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnTransferError">
      <summary>
            Occurs when an error occurs during the process of transfer.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnPostLoad">
      <summary>
            Occurs when images are loaded into the control from a local directory or memory.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnPrePageLoad">
      <summary>
            Occurs before loading image into control
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnPostPageLoad">
      <summary>
            Occurs after loading images into control
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnFrameCapture">
      <summary>
            Occurs when webcam capture a frame.
            </summary>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnAnnotationSelected">
      <summary>
            Occurs when an annotation is selected.
            </summary>
      <remarks>
            Please note this event is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnAnnotationDeselected">
      <summary>
            Occurs when one or more annotations is deselected.
            </summary>
      <remarks>
            Please note this event is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnAnnotationCreated">
      <summary>
            Occurs when an annotation is created.
            </summary>
      <remarks>
            Please note this event is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnAnnotationMoved">
      <summary>
            Occurs when an annotation is moved..
            </summary>
      <remarks>
            Please note this event is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnAnnotationResized">
      <summary>
            Occurs when an annotation is resized..
            </summary>
      <remarks>
            Please note this event is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnAnnotationTextChanged">
      <summary>
            Occurs when the text in an annotation is changed.
            </summary>
      <remarks>
            Please note this event is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="E:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OnSourceUIClose">
      <summary>
            Occurs when the user clicks on the "Close" button of the Source's user interface.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SelectionRectAspectRatio">
      <summary>
            Returns or sets the selection rectangle aspect ratio. The ratio is refer to width/height (e.g. to keep width/height 3/2, you can set the ratio to 1.5). 
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Make sure the value is 0 or positive number. 0 means no limitation on aspect ratio. 
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SupportedDeviceType">
      <summary>
            Returns or sets the supported device type.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property before calling SelectSource() method and the defaule value is SDT_TWAIN.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BitDepth">
      <summary>
            Returns or sets the pixel bit depth for the current value of PixelType property. 
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Supports 1,8,24,32bit.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Brightness">
      <summary>
            Returns or sets the brightness value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BrightnessMinValue">
      <summary>
            Returns the min brightness value available within the Source
            This is a readonly property
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BrightnessMaxValue">
      <summary>
            Returns the max brightness value available within the Source
            This is a readonly property
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BrightnessDefaultValue">
      <summary>
            Returns the default brightness value available within the Source
            This is a readonly property
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BrightnessStepDelta">
      <summary>
            Returns the stepping delta value of brightness available within the Source
            This is a readonly property
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoBrightness">
      <summary>
            Returns or sets the brightness value if auto available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Capability">
      <summary>
            Specifies the capability to be negotiated. This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Prior to negotiating capability, OpenSource() needs to be called to make Dynamic .NET TWAIN ready for capability negotiation.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapCurrentIndex">
      <summary>
            Returns or sets the index (0-based) of a list to indicate the Current Value when the value of the CapType property is TWON_ENUMERATION.
            If the data type of the capability is String, the list is in GetCapItemsString. 
            For other data types, the list is in GetCapItems. 
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling CapGet() method. After setting this property, call CapSet() method to actually set the value.
            The CapCurrentIndex property is 0-based.
            It is valid only when the CapType property is TWON_ENUMERATION.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapCurrentValue">
      <summary>
            Returns or sets the current value in a range when the value of the CapType property is TWON_RANGE.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling CapGet() method.
            After setting this property, call CapSet() method to actually set the value.
            CapCurrentValue property is valid only when the value of the CapType property is TWON_RANGE.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapDefaultIndex">
      <summary>
            Returns the index (0-based) of a list to indicate the Default Value when the value of the CapType property is TWON_ENUMERATION. If the data type of the capability is String, the list is in GetCapItemsString. For other data types, the list is in GetCapItems property. 
            This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling CapGet() method.
            The CapDefaultIndex property is 0-based and read-only.
            It is valid only when the CapType property is TWON_ENUMERATION.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapDefaultValue">
      <summary>
            Returns the default value in a range when the value of the CapType property is TWON_RANGE.
            This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling CapGet() method.
            Default value reflects the source's power-on value. It can NOT be set.
            CapDefaultValue property is valid only when the value of the CapType property is TWON_RANGE.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapMaxValue">
      <summary>
            Returns or sets the maximum value in a range when the value of the CapType property is TWON_RANGE. 
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling CapGet() method. After setting this property, call CapSet() method to actually set the value.
            CapMaxValue property is valid only when the value of the CapType property is TWON_RANGE.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapMinValue">
      <summary>
            Returns or sets the minimum value in a range when the value of the CapType property is TWON_RANGE.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling CapGet() method. After setting this property, call CapSet() method to actually set the value.
            CapMinValue property is valid only when the value of the CapType property is TWON_RANGE.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapNumItems">
      <summary>
            Returns or sets how many items are in the list when the value of the CapType property is TWON_ARRAY or TWON_ENUMERATION. For String data type, the list is in GetCapItemsString. For other data types, the list is in GetCapItems. 
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling CapGet() method. 
            After setting this property, call CapSet() method to actually set the value.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapStepSize">
      <summary>
            Returns or sets the step size in a range when the value of the CapType property is TWON_RANGE.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling CapGet() method. After setting this property, call CapSet() method to actually set the value.
            CapStepSize property is valid only when the value of the CapType property is TWON_RANGE.
            For information of which properties are valid for different container types, please refer to CapType property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapType">
      <summary>
            Returns or sets the type of capability container used to exchange capability information between application and source. 
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks><list type="table"><listheader><term>Allowed Values</term><description>Description</description></listheader><item><term>TWON_ARRAY(3)</term><description>
            An array of associated individual values. 
            CapNumItems property, GetCapItems/SetCapItems/GetCapItemsString/SetCapItemsString are valid.</description></item><item><term>TWON_ENUMERATION(4)</term><description>A group of associated individual values. The values are ordered from the lowest to highest values, but the step size between every two values is probably not uniform.
            CapNumItems property, CapCurrentIndex property, CapDefaultIndex property, GetCapItems/SetCapItems/GetCapItemsString/SetCapItemsString are valid.
            </description></item><item><term>TWON_ONEVALUE(5)</term><description>A single value. CapValue property or CapValueString property is valid.</description></item><item><term>TWON_RANGE(6)</term><description>A range of individual values. 
            CapMinValue property, CapMaxValue property, CapStepSize property, CapDefaultValue property and CapCurrentValue property are valid. 
            </description></item></list><br/>
            CapType property does not need to be set before CapGet() is called.
            CapDefaultIndex property and CapDefaultValue property reflect power-on values and are not available with CapSet().
            
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapValueType">
      <summary>
            Returns or sets the value type for reading the value of a capability. This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling CapGet() method. After setting this property, call CapSet() method to actually set the value.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapValue">
      <summary>
            Returns or sets the value of the capability specified by Capability property when the value of the CapType property is TWON_ONEVALUE. 
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling CapGet() method. After setting this property, call CapSet() method to actually set the value.
            The Double type of CapValue property is used to present Double, Single(Float), Long, Integer and even Boolean types. For String type, please use CapValueString property. 
            When using Double type for Boolean type, 1 denotes true, 0 denotes false. The constant true/False of Visual Basic can NOT be used.
            This is very like GetCapItems and GetCapItemsString, where GetCapItemsString is used to present String type and GetCapItems is used to present other types. GetCapItems and GetCapItemsString are used when the container type is TWON_ARRAY or TWON_ENUMERATION.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CapValueString">
      <summary>
            Returns or sets the string value for a capability when the value of the CapType property is TWON_ONEVALUE.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling CapGet() method. After setting this property, call CapSet() method to actually set the value.
            CapValueString property is used to set or return String type value. For any other data types when the CapType property is TWON_ONEVALUE, use CapValue property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Contrast">
      <summary>
            Returns or sets the contrast values available within the Source. 
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ContrastMinValue">
      <summary>
            Returns the min contrast value available within the Source
            This is a readonly property
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ContrastMaxValue">
      <summary>
            Returns the max contrast value available within the Source
            This is a readonly property
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ContrastDefaultValue">
      <summary>
            Returns the default contrast value available within the Source
            This is a readonly property
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ContrastStepDelta">
      <summary>
            Returns the stepping delta value of contrast available within the Source
            This is a readonly property
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoContrast">
      <summary>
            Returns or sets the contrast values if auto available within the Source. 
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CurrentSourceName">
      <summary>
            Returns the device name of current source.
            This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If no source is currently selected, CurrentSourceName property returns "".
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.DataSourceStatus">
      <summary>
            Returns the value indicating the data source status. 
            This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Allowed values are between 0 and 3, defined in TWDataSourceStatus. 
            0, indicate the data source is closed. 
            1, indicate the data source is opened.
            2, indicate the data source is enabled. 
            3, indicate the data source is acquiring image. 
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.DefaultSourceName">
      <summary>
            Returns the device name of default source. 
            This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Duplex">
      <summary>
            Returns whether the source supports duplex.
            If so, it further returns the level of duplex the Source supports (one pass or two pass duplex). This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks><list type="table"><listheader><term>Values</term><description>Duplex</description></listheader><item><term>0</term><description>Duplex is not supported </description></item><item><term>1</term><description>1-pass duplex</description></item><item><term>2</term><description>2-pass duplex</description></item></list>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoBright">
      <summary>
            Returns or sets whether the Source's Auto-brightness function is enabled. This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoFeed">
      <summary>
            Returns or sets whether the Source enable automatic document feeding process. This is a runtime property. 
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If the value of this property is true, the Source will automatically feed the next page from the document feeder after the previous page is acquired.
            Using this property after opening the Data Source and checking if the value of IfFeederEnabled property is true.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoScan">
      <summary>
            Returns or sets whether the Source enables the automatic document scanning process. This is a runtime property. 
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If the value of this property is true, the Source will automatically feed the next page from the document feeder after the previous page is acquired.
            Using this property after opening the Data Source and checking if the value of IfFeederEnabled property is true.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfDeviceOnline">
      <summary>
             Returns whether the Source is attached, powered on, and communicating. This is a runtime, read-only property.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfDisableSourceAfterAcquire">
      <summary>
            Returns or sets whether close the Data Source User Interface after acquire all images. Default value of this property is false.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            IfShowUI     IfDisableSourceAfterAcquire     Actions 
            true         false                           UI will be shown, user can acquire many images, user must close UI himself 
            true         true                            UI will be shown, only one image will be acquired, UI will be closed automatically 
            false        false                           UI will not be shown, one or many images will be acquired (if the source supports), the device will not be closed automatically and needs to be closed by DisableSource() method 
            false        true                            UI will not be shown, one or many images will be acquired (if the source supports), the device will be closed automatically 
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfDuplexEnabled">
      <summary>
            Returns or sets whether the Source supports duplex. If true, the scanner scans both sides of a paper; otherwise, the scanner will scan only one side of the image. This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Call OpenSource() method and confirm that the duplex is supported before using this property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfFeederEnabled">
      <summary>
            Returns or sets whether the Automatic Document Feeder (ADF) is enabled. This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If the value of this property is true, Source must acquire data from the document feeder acquire area and other feeder capabilities can be used. If the value of this property is false, Source must acquire data from the non-feeder acquire area and no other feeder capabilities can be used.
            Call OpenSource() method before using this property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfFeederLoaded">
      <summary>
            Returns whether or not there are documents loaded in the Source's feeder when IfFeederEnabled and IfPaperDetectable are true. This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Call OpenSource() method before using this property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfModalUI">
      <summary>
            Returns or sets whether the UI (User Interface) of Source runs in modal state. Default value of this property is true.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If the property is true, the TWAIN Data Source will display its User Interface as modal window when invoking the AcquireImage method.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfPaperDetectable">
      <summary>
            Returns the value whether the Source has a paper sensor that can detect documents on the ADF or Flatbed. This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Reading this property after calling OpenSource() method.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfShowIndicator">
      <summary>
            Returns or sets whether the Source displays a progress indicator during acquisition and transfer, regardless of whether the Source's user interface is active. This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfShowUI">
      <summary>
            Returns or sets whether the Source displays the User Interface.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If the property is true, the TWAIN Data Source will display its User Interface when invoking the AcquireImage method. 
            If the property is false, the Data Source UI will not be displayed and scanning will begin immediately using the current capability values.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfUIControllable">
      <summary>
            Returns whether the Source supports acquisition with the UI (User Interface) disabled. If false, 
            indicates that this Source can only support acquisition with the UI enabled. This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageBitsPerPixel">
      <summary>
            Returns the number of bits in each image pixel (or bit depth). This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            24-bit RGB has BitsPerPixel = 24. 8-bit Grayscale has BitsPerPixel = 8. Black and White has BitsPerPixel = 1.
            ImageBitsPerPixel property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutDocumentNumber">
      <summary>
            Returns the document number of the current image. This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Usually, increment when a group of new pages is placed into the document feeder (usually tell this has happened when the feeder empties).
            ImageLayoutDocumentNumber property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutFrameBottom">
      <summary>
            Returns the value of the bottom-most edge of the current image frame (in ICAP_UNITS). This is a read-only runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The unit of ImageLayoutFrameBottom property is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            ImageLayoutFrameBottom property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            The frame information here is only about the current frame. To get the information about all the frames to be transferred in an acquire session, please use capability negotiation. The capability to be negotiated is ICAP_FRAMES. Please refer to How to negotiate ICAP_FRAMES for details and sample code.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutFrameLeft">
      <summary>
            Returns the value of the left-most edge of the current image frame (in ICAP_UNITS). This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The unit of ImageLayoutFrameLeft property is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            ImageLayoutFrameLeft property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            The frame information here is only about the current frame. To get the information about all the frames to be transferred in an acquire session, please use capability negotiation. The capability to be negotiated is ICAP_FRAMES. Please refer to How to negotiate ICAP_FRAMES for details and sample code.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutFrameNumber">
      <summary>
            Returns the frame number of the current image. This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The frames are acquired from the same page. The number is reset when a new page is acquired.
            ImageLayoutFrameNumber property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            The frame information here is only about the current frame. To get the information about all the frames to be transferred in an acquire session, please use capability negotiation. The capability to be negotiated is ICAP_FRAMES. Please refer to How To Negotiate ICAP_FRAMES for details and sample code.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutFrameRight">
      <summary>
            Returns the value of the right-most edge of the current image frame (in ICAP_UNITS). This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The unit of ImageLayoutFrameRight property is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            ImageLayoutFrameRight property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            The frame information here is only about the current frame. To get the information about all the frames to be transferred in an acquire session, please use capability negotiation. The capability to be negotiated is ICAP_FRAMES. Please refer to How to negotiate ICAP_FRAMES for details and sample code.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutFrameTop">
      <summary>
            Returns the value of the top-most edge of the current image frame (in ICAP_UNITS). This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The unit of ImageLayoutFrameTop property is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            ImageLayoutFrameTop property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            The frame information here is only about the current frame. To get the information about all the frames to be transferred in an acquire session, please use capability negotiation. The capability to be negotiated is ICAP_FRAMES. Please refer to How to negotiate ICAP_FRAMES for details and sample code.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLayoutPageNumber">
      <summary>
             Returns the page number of the current image. This is a runtime, read-only property.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             Increment for each page fed from a page feeder.
             ImageLayoutPageNumber property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageLength">
      <summary>
             Returns how tall/int, in pixels, the image is. This is a runtime, read-only property.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             -1 is returned, if the Source doesn't know the length of the image.(hand scanners may do this).
             ImageLength property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImagePixelType">
      <summary>
             Returns the pixel type of the current image. This is a runtime, read-only property.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks><list type="table"><listheader><term>Values</term><description>Description</description></listheader><item><term>TWPT_BW(0)</term><description>Black and White</description></item><item><term>TWPT_GRAY(1)</term><description>Grayscaled</description></item><item><term>TWPT_RGB(2)</term><description>RGB</description></item></list><br/>
             ImagePixelType property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageWidth">
      <summary>
             Returns how width, in pixels, the image is. This is a runtime, read-only property.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             -1 is returned, if the Source doesn't know the width of the image. (handhold scanners may do this).
             ImageWidth property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageXResolution">
      <summary>
            Returns the X resolution of the current image. X resolution is the number of pixels per ICAP_UNITS in the horizontal direction. This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The unit of ImageXResolution property is determined by ICAP_UNITS capability.
            The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
            ImageXResolution property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageYResolution">
      <summary>
             Returns the Y resolution of the current image. Y resolution is the number of pixels per ICAP_UNITS in the vertical direction. This is a runtime, read-only property.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             The unit of ImageYResolution property is determined by ICAP_UNITS capability.
             The default unit is assumed to be "inches" unless it has been otherwise negotiated between the application and source.
             ImageYResolution property, along with other properties about information of the current image, is valid only in OnPreTransfer and OnPostTransfer event.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PageSize">
      <summary>
            Returns or sets the page size(s) the Source can/should use to acquire image data. This is a runtime property. 
            Please set the pagesize value in enum <see cref="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes"/>.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PendingXFERs">
      <summary>
            Returns the number of transfers the Source is ready to supply, upon demand. This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            This property is valid only in OnPostTransfer event.
            The Data Source returns -1 if it is not sure how many transfers are pending. Scanners with ADF (Automatic Document Feeder) will typically return -1 if the current image is not the last one.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PixelFlavor">
      <summary>
            Returns or sets the pixel flavor for acquired images. This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            <list type="table"><listheader><term>Allowed Values</term><description>Description</description></listheader><item><term>0</term><description>Chocolate. Zero pixel represents darkest shade.</description></item><item><term>1</term><description>Vanilla. Zero pixel represents lightest shade.</description></item></list>
            The default value is 0. That is, the default value of PixelFlavor is Chocolate.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PixelType">
      <summary>
            Returns or sets the pixel type of acquired images. This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            <list type="table"><listheader><term>Allowed Values</term><description>PixelType TWICapPixelType</description></listheader><item><term>0</term><description>BW</description></item><item><term>1</term><description>GRAY</description></item><item><term>2</term><description>RGB</description></item><item><term>3</term><description>PALETTE</description></item><item><term>4</term><description>CMY</description></item><item><term>5</term><description>CMYK</description></item><item><term>6</term><description>YUV</description></item><item><term>7</term><description>YUVK</description></item><item><term>8</term><description>CIEXYZ</description></item></list>
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Resolution">
      <summary>
            Returns or sets the current resolution for image acquisition. This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SourceCount">
      <summary>
            Returns how many sources are installed in the system. This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If SourceCount is 0, no source is installed or the Source Manager is not open.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.TransferMode">
      <summary>
            Returns or sets the transfer mode. Please set the value of transfer mode in enum <see cref="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapSetupXFer"/>.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The default value of the TransferMode property is TWSX_NATIVE (0). 
            For DISK FILE mode, since it is not required by TWAIN, the application needs to make sure it is supported by the current Source. One way to do this is checking the TransferMode property after OpenSource() to see if it is still TWSX_FILE. 
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Unit">
      <summary>
            Returns or sets the unit of measure. This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks><list type="table"><listheader><term>Allowed Values</term><description>Unit</description></listheader><item><term>0</term><description>INCHES</description></item><item><term>1</term><description>CENTIMETERS</description></item><item><term>2</term><description>PICAS</description></item><item><term>3</term><description>POINTS</description></item><item><term>4</term><description>TWIPS</description></item><item><term>5</term><description>PIXELS</description></item></list>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.XferCount">
      <summary>
            Returns and sets the number of images you are willing to transfer per session. This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Allowed values are between -1 and 32767
            N,  indicate willing  to transfer N images this session.
            -1,  indicate willing to transfer multiple images.
            Using this property after calling OpenSource() method.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BlankImageMaxStdDev">
      <summary>
            Returns or sets the standard deviation of the pixels in the image.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The allowed values are from 0 to 100. 0 means it is a single-color image. The default value is 1.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BlankImageThreshold">
      <summary>
            Returns or sets the dividing line between black and white. The default value is 128.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The allowed values are from 0 to 255. The default value is 128.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BorderStyle">
      <summary>
             Returns or sets the border style.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks><list type="table"><listheader><term>Allowed Values</term><description>Description</description></listheader><item><term>None (0)</term><description>No border</description></item><item><term>SingleFlat (1)</term><description>Flat border</description></item><item><term>Single3D (2)</term><description>3D border</description></item></list>
             The default value of the BorderStyle property is None (0).
             
             Supports changing the border style of the control, not the border style of each image in the view mode.
            
             Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CurrentImageIndexInBuffer">
      <summary>
            Returns or sets current index of image in buffer. This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The index is 0 based. Current image is alwarys selected.
            By changing CurrentImageIndexInBuffer, you can enumerate all the images in buffer. 
            When CurrentImageIndexInBuffer is changed, the control will be redrawn to reflect the change.
            When an image is added to buffer, the CurrentImageIndexInBuffer is skipped to the next one and the new image is added there.
            When image buffer is full, that is HowManyImagesInBuffer = MaxImagesInBuffer, the new acquired or loaded image will replace the existing one, positioned by CurrentImageIndexInBuffer. 
            For example, if HowManyImagesInBuffer = 4 and MaxImagesInBuffer = 4, CurrentImageIndexInBuffer = 3, after a new image is acquired, the CurrentImageIndexInBuffer is set to 0, 
            and the 1st image is replaced by the new acquired one . If another image is acquired again, the CurrentImageIndexInBuffer is set to 1 and the 2nd image is replaced by the new acquired one.
            If an image is selected, the value of CurrentImageIndexInBuffer will be the index of the selected image.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.EnableInteractiveZoom">
      <summary>
            Returns or sets whether the user can zoom image using hot key.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If it is set to true. The user can use hot key "Ctrl + Mouse Wheel" or "Alt + Mouse Wheel" to zoom in/out the image, use "+" (small keyboard) to zoom in the image, and use "-" (small keyboard) to zoom out the image. 
            The default value of this property is true.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ErrorCode">
      <summary>
            Returns the error code. This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If no error occurs, TWERR_SUCCESS(0) is returned.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ErrorString">
      <summary>
            Returns the error string. This is a runtime, read-only property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            none
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPPassword">
      <summary>
            Returns or sets the password used to log into the FTP server.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If you wish to use "anonymous" user name to log into a FTP server, 
            just use the default value of FTPUserName property and FTPPassword property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPPort">
      <summary>
            Returns or sets the port number of the FTP server.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The default FTP port number is 21.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FTPUserName">
      <summary>
            Returns or sets the user name used to log into the FTP server.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If you  wish to use "anonymous" user name to log into a FTP server, just use the default value of FTPUserName property and FTPPassword property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HowManyImagesInBuffer">
      <summary>
             Returns how many images are in buffer. This is a runtime, read-only property.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPPassword">
      <summary>
             Sets or returns the password used to log into the HTTP server.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPPort">
      <summary>
             Returns or sets the port number of the HTTP server.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            The default HTTP port number is 80. This property is used with IfSSL property.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPPostResponseString">
      <summary>
             Returns the response string from the HTTP server if an error occurs for HTTPUploadThroughPost() method. This is a runtime, read-only property.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            If HTTPUploadThroughPost() method returns false, check this property for response string from the HTTP server. If HTTPUploadThroughPost() method return true, this property returns "".
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HTTPUserName">
      <summary>
             Returns or sets the user name used to log into the HTTP server.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfSSL">
      <summary>
             Returns or sets that an SSL connection should be used.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            The default value is false.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAppendImage">
      <summary>
             Returns or sets whether insert or append new scanned images.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            If the value of the property is set to true, the new scanned image will be appended after the last image in buffer; if the value of the property is set to false, the new scanned image will be inserted before the current image.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfFitWindow">
      <summary>
             Returns or sets whether to resize the image to fit the size of window when the view mode is set to -1 by -1. 
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            The default value of the IfFitWindow property is true.
            When the value is False, the image will be displayed in its full size and scroll bars will be shown if necessary (the width or height of the image is bigger than the control size).
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FitWindowType">
      <summary>
            Returns or sets whether to resize the image to fit the image to the width or height of window.To use the property,the view mode should be set to -1 by -1. 
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
        <div class="tablediv">
          <table>
            <tr valign="center">
              <th>Allowed Values</th>
              <th>Fit Window Type</th>
            </tr>
            <tr valign="center">
              <td>0(default)</td>
              <td>Fit the image to the width and height of the window</td>
            </tr>
            <tr valign="center">
              <td>1</td>
              <td>Fit the image to the height of the window</td>
            </tr>
            <tr valign="center">
              <td>2</td>
              <td>Fit the image to the width of the window</td>
            </tr>
          </table>
        </div>
      </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfShowCancelDialogWhenImageTransfer">
      <summary>
             Sets or returns whether to show the cancel dialog when uploading images to server. 
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            The default value of the IfShowCancelDialogWhenImageTransfer property is true.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfShowCancelDialogWhenBarcodeOrOCR">
      <summary>
             Sets or returns whether to show the cancel dialog when reading barcode or performing OCR 
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            The default value of the IfShowCancelDialogWhenBarcodeOrOCR property is false.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfThrowException">
      <summary>
            Returns or sets whether an exception will be thrown when an error occurs.
            </summary>
      <remarks>
        <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            If IfThrowException is true, When an error occurs, an exception will be thrown.
            Otherwise, please check ErrorCode and ErrorString.
            </exception>
      </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfTiffMultiPage">
      <summary>
             Returns or sets whether the Source allows to save many images in one TIFF file. The default value is false.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            If this property is true, the new image will be added to existing TIFF file.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageEditorIfEnableEnumerator">
      <summary>
             Returns or sets whether the image enumerator is enabled in Image Editor.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            The default value is true.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageEditorIfReadonly">
      <summary>
             Returns or sets whether the Image Editor is read-only.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            The default value is False. If this property is true, the Image Editor GUI can only be viewed with all functionalities disabled.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageEditorWindowTitle">
      <summary>
             Returns or sets the title of Image Editor window.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ImageMargin">
      <summary>
            Returns or sets the margin between images when multiple images are displayed in Dynamic .NET TWAIN.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The default value will auto judge.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.JPEGQuality">
      <summary>
            Returns or sets the quality of the JPEG file.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The default value of JPEGQuality property is 80.
            The valid range is 0-100. The higher the JPEGQuality property, the better the JPEG quality and the greater the size of the file.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Manufacturer">
      <summary>
            Returns or sets the manufacture string for the application identity.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The Manufacturer property is a part of the application identity. The application identity consists of the Manufacturer, ProductFamily, ProductName and VersionInfo properties. These information may be shown in Source's interface.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MaxImagesInBuffer">
      <summary>
            Returns or sets the maximum number of images can be held in buffer.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The default value of this property is 64.
            When image buffer is full, that is HowManyImagesInBuffer = MaxImagesInBuffer, the new acquired or opened image will replace the existing one, positioned by CurrentImageIndexInBuffer. 
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MouseShape">
      <summary>
            Returns or sets the shape of the mouse.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            When the value of the property is set to true, the cursor is set as a hand. If the width or height of the image is bigger than the control size, scroll bars will be shown and you can drag the image to adjust the position in the control.
            When the value of the property is set to false, the cursor is set as an arrow. You can select an area in Dynamic .NET TWAIN directly and the OnImageAreaSelected event will be fired.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFVersion">
      <summary>
            Returns or sets the version of the PDF document.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFAuthor">
      <summary>
            Returns or sets the name of the person who creates the PDF document.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFCompressionType">
      <summary>
            Returns or sets the compression type of PDF files.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
        <div class="tablediv">
          <table>
            <tr valign="center">
              <th>Allowed Values</th>
              <th>Description</th>
            </tr>
            <tr valign="center">
              <td>DWTPDFCompressionType.enumAutoEncode</td>
              <td>Auto mode</td>
            </tr>
            <tr valign="center">
              <td>DWTPDFCompressionType.enumCCITTFax4Encode</td>
              <td>CCITT Group 4 fax encoding</td>
            </tr>
            <tr valign="center">
              <td>DWTPDFCompressionType.enumFlateEncode</td>
              <td>Flate encoding</td>
            </tr>
            <tr valign="center">
              <td>DWTPDFCompressionType.enumJPEGEncode</td>
              <td>JPEG encoding</td>
            </tr>
          </table>
        </div>
      </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFPageSize">
      <summary>
            Returns or sets the page size of images which are going to be saved as PDF files.
            </summary>
      <returns>
            Returns the page size of PDF files.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFCreationDate">
      <summary>
            Returns or sets the date when the PDF document is created.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The default value is current date.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFCreator">
      <summary>
            Returns or sets the name of the application that created the original document, if the PDF document is converted from another form.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFKeywords">
      <summary>
            Returns or sets the keywords associated with the PDF document.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFModifiedDate">
      <summary>
            Returns or sets the date when the PDF document is last modified.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The default value is current date.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFProducer">
      <summary>
            Returns or sets the name of the application that converted the PDF document from its native.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFSubject">
      <summary>
            Returns or sets the subject of the PDF document.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFTitle">
      <summary>
            Returns or sets the title of the PDF document.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFMarginBottom">
      <summary>
            Returns or sets the bottom margin of a PDF file.
            </summary>
      <returns>
            Returns the bottom margin of a PDF file.
            </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            You can use PDFMarginLeft, PDFMarginRight, PDFMarginTop and PDFMarginBottom to set the PDF margins.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFMarginLeft">
      <summary>
             Returns or sets the left margin of a PDF file.
             </summary>
      <returns>
             Returns the left margin of a PDF file.
             </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             You can use PDFMarginLeft, PDFMarginRight, PDFMarginTop and PDFMarginBottom to set the PDF margins.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFMarginRight">
      <summary>
             Returns or sets the right margin of a PDF file.
             </summary>
      <returns>
             Returns the right margin of a PDF file.
             </returns>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
             You can use PDFMarginLeft, PDFMarginRight, PDFMarginTop and PDFMarginBottom to set the PDF margins.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ProductFamily">
      <summary>
            Returns or sets the product family string for the application identity.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The ProductFamily property is a part of the application identity. The application identity consists of the Manufacturer, ProductFamily, ProductName and VersionInfo properties. These information may be shown in Source's interface.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ProductName">
      <summary>
            Returns or sets the product name string for the application identity.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The ProductName property is a part of the application identity. The application identity consists of the Manufacturer, ProductFamily, ProductName and VersionInfo properties. These information may be shown in Source's interface.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.VersionInfo">
      <summary>
            Returns or sets the version info string for the application identity.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The VersionInfo property is a part of the application identity. The application identity consists of the Manufacturer, ProductFamily, ProductName and VersionInfo properties. These information may be shown in Source's interface.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Zoom">
      <summary>
            Returns or sets zoom factor for the current image, only can set the property When the view mode is set to -1 by -1. This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The zoom value is expressed as a percentage. The valid range is from 2 to 6500 percent (Value: 0.02 ~ 65.0); the default value is 100 percent (Value: 1.0). A zoom value can be specified before or after an image is displayed. When the zoom value is changed, the displayed image will refresh automatically.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HttpFieldNameOfUploadedImage">
      <summary>
            Specifies the field name of uploaded image through POST.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Default is "RemoteFile". It is used in HTTPUploadThroughPost, HTTPUploadThroughPostEx, 
            HTTPUploadAllThroughPostAsMultiPageTIFF, HTTPUploadAllThroughPostAsPDF,
            HTTPUploadThroughPostAsMultiPageTIFF, HTTPUploadThroughPostAsMultiPagePDF
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ProxyServerName">
      <summary>
            Returns or sets the name of the proxy server.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Only the name of the proxy serevr is needed. For instance, 192.168.1.100.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ProxyServerPort">
      <summary>
            Returns or sets the port number of the Proxy server.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ProxyUserName">
      <summary>
            Returns or sets the user name used to log into the Proxy server.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ProxyPassword">
      <summary>
            Sets or returns the password used to log into the Proxy server.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfFTPPassiveMode">
      <summary>
            Returns or sets whether FTP passive mode is enabled. 
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The Default value is true. If it is true, FTP passive mode is enabled.
            If it is false, FTP passive mode is not enabled.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.CurrentSelectedImageIndicesInBuffer">
      <summary>
            Returns or sets current selected image indices in buffer.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If no image in buffer, returned array count is zero.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AllowMultiSelect">
      <summary>
            Returns or sets whether support multiple select. This property is invalid when the view mode is set to -1 by -1 or 1 by 1.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Default is false. If it is true, when a user selecting multiple images, the CurrentImageIndexInBuffer is always the minimum 
            index in the selected images.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfModalImageEditor">
      <summary>
            Returns or sets whether the ImageEditor control is modal.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Default is true.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SelectionImageBorderColor">
      <summary>
            Returns or sets the border color of the selected image. It is a value specifying the 32-bit ARGB value.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Default is Navy. The byte-ordering of the 32-bit ARGB value is AARRGGBB. The most significant byte (MSB), 
            represented by AA, is the alpha component value. The second, third, and fourth bytes, represented by RR, GG, and BB,
            are the color components red, green, and blue respectively.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MaxUploadImageSize">
      <summary>
            Returns or sets the maximum size of image can be upload.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            The default value of this property is -1. 
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BackgroundFillColor">
      <summary>
            Returns or sets the fill color of the selected area of an image when it is cut, erased, or rotated. It is a value specifying the 32-bit ARGB value.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Default is Black. The byte-ordering of the 32-bit ARGB value is AARRGGBB. The most significant byte (MSB), 
            represented by AA, is the alpha component value. The second, third, and fourth bytes, represented by RR, GG, and BB,
            are the color components red, green, and blue respectively.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BackgroundColor">
      <summary>
            Returns or sets the background color of the main control. It is a value specifying the 32-bit ARGB value.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Default is White. The byte-ordering of the 32-bit ARGB value is AARRGGBB. The most significant byte (MSB), 
            represented by AA, is the alpha component value. The second, third, and fourth bytes, represented by RR, GG, and BB,
            are the color components red, green, and blue respectively.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.VScrollBar">
      <summary>
            Indicates whether the vertical scroll bar is visible when the images are larger than page size.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Default is true. If view mode is -1 * -1, ignore this setting.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BarcodeCount">
      <summary>
            Returns the number of barcode detected in an image. It's only valid in OnPostTransfer event.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If the Source doesn't contain barcode or not supported barcode, 0 will be returned.
            BarcodeCount property, along with other properties about information of the current image, is valid only in OnPostTransfer event.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfShowPrintUI">
      <summary>
            Returns or sets whether the driver of the printer displays the User Interface.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is false, an exception will be thrown.
            When IfThrowException property is true, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If the property is true(default), the driver of the printer will display its User Interface when invoking the Print method. If the property is false, the User Interface will not be displayed and the print process will get started immediately.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfPrintAnnotations">
      <summary>
            Returns or sets whether print annotations when calling print method.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is false, an exception will be thrown.
            When IfThrowException property is true, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            If the property is false(default), annotations will not be printed. If the property is true, annotations will be printed.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AnnotationType">
      <summary>
            Returns or sets the annotation type. To use the property,the property MouseShape should be set to false.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks><div class="tablediv"><table><tr valign="center"><th>Allowed Values</th><th>Annotation Types</th></tr><tr valign="center"><td>enumNone(default)</td><td>Select an area</td></tr><tr valign="center"><td>enumPointer(Pointer)</td><td>Select an existing annotation. Press "Ctrl" to multi-select annotations.</td></tr><tr valign="center"><td>enumText(Text)</td><td>Create a text.The annotation type will be set back to 1 once the annotation is completed..</td></tr><tr valign="center"><td>enumLine(Line)</td><td>Create a line.The annotation type will be set back to 1 once the annotation is completed..</td></tr><tr valign="center"><td>enumRectangle(Rectangle)</td><td>Create a rectangle.The annotation type will be set back to 1 once the annotation is completed..</td></tr><tr valign="center"><td>enumEllipse(Ellipse)</td><td>Create a ellipse.The annotation type will be set back to 1 once the annotation is completed..</td></tr></table></div><br/>
            Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AnnotationTextFont">
      <summary>
            Returns or sets the font for the annotation text. This property is only valid when the annotation type is set to 2(Text).
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AnnotationTextColor">
      <summary>
            Returns or sets the color for the annotation text. This property is only valid when the annotation type is set to 2(Text).
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AnnotationPen">
      <summary>
             Returns or sets the color and width of the pen for drawing the annotation rectangle/ellipse/line. This property is only valid when the annotation type is NOT 2(Text).
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            By default, the color is black and the width is 1;
             Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.AnnotationFillColor">
      <summary>
             Returns or sets the fill color and transparency for the area inside the annotation rectangle/ellipse. This property is only valid when the annotation type is NOT 2(Text).
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            By default, the color is white and not transparent.
             Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfSaveAnnotations">
      <summary>
             Returns or sets whether save the created annotations.This property only applies to PDF files.
             </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
      <remarks>
            The default value is false.
             Please note this method/property is Not yet supported in DynamicDotNetTWAIN.Wpf.dll. But it is available in DynamicDotNetTWAIN.dll.
             </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LogLevel"><summary>
             Returns or sets whether enable the debug mode of Dynamic .NET TWAIN.
             </summary>
             // <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
             When an error occurs and IfThrowException property is true, an exception will be thrown.
             When IfThrowException property is false, please check ErrorCode and ErrorString.
             </exception>
             
            <remarks>
            The default value is 0. When the value i is set to 1, Dynamic .NET TWAIN will send all messages to an external Debugger tool for display. (eg. DgbView.exe)
            </remarks>
        </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MagType">
      <summary>
            Returns the magnetic type if the scanner support magnetic data recognition. This is a read-only property.
            </summary>
      <remarks>Only valid when ScanInNewProcess is true</remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MagData">
      <summary>
            Returns the magnetic data if the scanner support magnetic data recognition. This is a read-only property.
            </summary>
      <remarks>Whether it works depends on the scanner's capability. Only valid when ScanInNewProcess is true</remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Hue">
      <summary>
            Returns or sets the Hue value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage(). 
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HueMinValue">
      <summary>
            Returns the min hue value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HueMaxValue">
      <summary>
            Returns the max hue value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HueDefaultValue">
      <summary>
            Returns the default hue value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.HueStepDelta">
      <summary>
            Returns or sets the stepping delta value of hue available within the Source.
            This is a readonly property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoHue">
      <summary>
            Returns or sets the hue value if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Saturation">
      <summary>
            Returns or sets the saturation value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Pelase note this is an webcam-speific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaturationMinValue">
      <summary>
            Returns the min saturation value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaturationMaxValue">
      <summary>
            Returns the max saturation value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaturationDefaultValue">
      <summary>
            Returns the default saturation value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SaturationStepDelta">
      <summary>
            Returns the stepping delta value of saturation available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoSaturation">
      <summary>
            Returns or sets the saturation value if auto available within the Source.
            This is a readonly property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Sharpness">
      <summary>
            Returns or sets the sharpness value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Pelase note this is an webcam-speific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SharpnessMinValue">
      <summary>
            Returns the min sharpness value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SharpnessMaxValue">
      <summary>
            Returns the max sharpness value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SharpnessDefaultValue">
      <summary>
            Returns the default sharpness value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.SharpnessStepDelta">
      <summary>
            Returns the stepping delta value of sharpness available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoSharpness">
      <summary>
            Returns or sets the sharpness value if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Gamma">
      <summary>
            Returns or sets the gamma value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GammaMinValue">
      <summary>
            Returns the min gamma value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GammaMaxValue">
      <summary>
            Returns the max gamma value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GammaDefaultValue">
      <summary>
            Returns the default gamma value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GammaStepDelta">
      <summary>
            Returns the stepping delta value of gamma available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoGamma">
      <summary>
            Returns or sets the gamma value if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.WhiteBalance">
      <summary>
            Returns or sets the white balance value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.WhiteBalanceMinValue">
      <summary>
            Returns the min white balance value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.WhiteBalanceMaxValue">
      <summary>
            Returns the max white balance value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.WhiteBalanceDefaultValue">
      <summary>
            Returns the default white balance value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.WhiteBalanceStepDelta">
      <summary>
            Returns the stepping delat value of white balance available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoWhiteBalance">
      <summary>
            Returns or sets the white balance value if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BklightComp">
      <summary>
            Returns or sets the backlight compensation value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BklightCompMinValue">
      <summary>
            Returns the min backlight compensation value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BklightCompMaxValue">
      <summary>
            Returns the max backlight compensation value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BklightCompDefaultValue">
      <summary>
            Returns the default backlight compensation value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BklightCompStepDelta">
      <summary>
            Returns the stepping delta value of backlight compensation available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoBklightComp">
      <summary>
            Returns or sets the backlight compensation value if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Gain">
      <summary>
            Returns or sets the gain value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GainMinValue">
      <summary>
            Returns the min gamma value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GainMaxValue">
      <summary>
            Returns the max gain value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GainDefaultValue">
      <summary>
            Returns the default gain value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.GainStepDelta">
      <summary>
            Returns the stepping delta value of gain available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoGain">
      <summary>
            Returns or sets the gain value if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ColorEnable">
      <summary>
            Returns or sets the color enable value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ColorEnableMinValue">
      <summary>
            Returns the min color enable value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ColorEnableMaxValue">
      <summary>
            Returns the max color enable value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ColorEnableDefaultValue">
      <summary>
            Returns the default color enable value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ColorEnableStepDelta">
      <summary>
            Returns the stepping delta value of color enable available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoColorEnable">
      <summary>
            Returns or sets the color enable value if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ZoomForCam">
      <summary>
            Returns or sets the zoom value for camera available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ZoomForCamMinValue">
      <summary>
            Returns the min zomm value for camera available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ZoomForCamMaxValue">
      <summary>
            Returns the max zoom value for value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ZoomForCamDefaultValue">
      <summary>
            Returns the default zoom value for camera available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ZoomForCamStepDelta">
      <summary>
            Returns the stepping delta value of zoom for camera available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoZoomForCam">
      <summary>
            Returns or sets the zoom value for camera if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Focus">
      <summary>
            Returns or sets the focus value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FocusMinValue">
      <summary>
            Returns the min focus value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FocusMaxValue">
      <summary>
            Returns the max focus value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FocusDefaultValue">
      <summary>
            Returns the default focus value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FocusStepDelta">
      <summary>
            Returns the stepping delta value of focus available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoFocus">
      <summary>
            Returns or sets the focus value if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Exposure">
      <summary>
            Returns or sets the exposure value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ExposureMinValue">
      <summary>
            Returns the min exposure value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ExposureMaxValue">
      <summary>
            Returns the max exposure value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ExposureDefaultValue">
      <summary>
            Returns the default exposure value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ExposureStepDelta">
      <summary>
            Returns the stepping delta value of exposure available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoExposure">
      <summary>
            Returns or sets the exposure value if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Iris">
      <summary>
            Returns or sets the iris value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IrisMinValue">
      <summary>
            Returns the min iris value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IrisMaxValue">
      <summary>
            Returns the max iris value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IrisDefaultValue">
      <summary>
            Returns the default iris value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IrisStepDelta">
      <summary>
            Returns the stepping delta value of iris available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoIris">
      <summary>
            Returns or sets the iris value if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Pan">
      <summary>
            Returns or sets the pan value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PanMinValue">
      <summary>
            Returns the min pan value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PanMaxValue">
      <summary>
            Returns the max pan value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PanDefaultValue">
      <summary>
            Returns the default pan value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PanStepDelta">
      <summary>
            Returns the stepping delta value of pan available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoPan">
      <summary>
            Returns or sets the pan value if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Tilt">
      <summary>
            Returns or sets the tilt value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.TiltMinValue">
      <summary>
            Returns the min tilt value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.TiltMaxValue">
      <summary>
            Returns the max filt value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.TiltDefaultValue">
      <summary>
            Returns the default tilt value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.TiltStepDelta">
      <summary>
            Returns the stepping delta value of tilt available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoTilt">
      <summary>
            Returns or sets the tilt value if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.Roll">
      <summary>
            Returns or sets the roll value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RollMinValue">
      <summary>
            Returns the min roll value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RollMaxValue">
      <summary>
            Returns the max roll value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RollDefaultValue">
      <summary>
            Returns the default roll value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.RollStepDelta">
      <summary>
            Returns the stepping delta value of roll available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.IfAutoRoll">
      <summary>
            Returns or sets the roll value if auto available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MediaType">
      <summary>
            Returns or sets the media type value available within the Source.
            This is a runtime property.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
      <remarks>
            Using this property after calling OpenSource() method and before calling AcquireImage().
            Please note this  is an webcam-specific method/property.
            </remarks>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MediaTypeList">
      <summary>
            Returns media type list available within the Source.
            This is a readonly property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ResolutionForCam">
      <summary>
            Returns or sets camera's current resolution value available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.ResolutionForCamList">
      <summary>
            Returns camera's resolution list available within the Source.
            This is a readonly property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FrameRate">
      <summary>
            Returns camera's current framerate value available within the Source.
            This is a runtime property.
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FrameRateMinValue">
      <summary>
            Returns the min framerate value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.FrameRateMaxValue">
      <summary>
            Returns the max framerate value available within the Source
            This is a readonly property
            </summary>
      <remark>
            Please note this  is an webcam-specific method/property.
            </remark>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OCRUnicodeFontName">
      <summary>
            Returns or sets the unicode font name used in PDF file. For example, "Arial", "ArialUni".
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OCRUseDetectedFont">
      <summary>
            Returns or sets whether use the detected font.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OCRTessDataPath">
      <summary>
            Returns or sets the tessdata path. The datapath must be the name of the parent directory of tessdata and must be end in / . Any name after the last / will be stripped.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OCRLanguage">
      <summary>
            Returns or sets the language string. The language is (usually) an ISO 639-3 string, default is "eng".
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OCRPageSetMode">
      <summary>
            Returns or sets the possible modes for page layout analysis.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OCRResultFormat">
      <summary>
            Returns or sets the OCR output format.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OCRDllPath">
      <summary>
            Returns or sets the OCR dll path, without file name.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OCRNumericOnly">
      <summary>
            Returns or sets whether use the detected font.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.OCRPdfFontSize">
      <summary>
            Returns or sets whether use the detected font.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFRasterizerDllPath">
      <summary>
            Returns or sets the PDF Rasterizer dll path, without file name.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.LicenseKeys">
      <summary>
            Set license information (serial number) in runtime. 
            For multiple serial numbers, please use semicolon (;) to separate them.
            Note: please bind the license information before you call any Dynamic .NET TWAIN method.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.MaxBarcodesToRead">
      <summary>
            Returns or sets the maximum number of barcodes to be detected. Default value is 0x7FFFFFFF(Max int). 
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.BarcodeDllPath">
      <summary>
            Returns or sets the Barcode dll path, without file name.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.EnableKeyboardInteractive">
      <summary>
            Whether or not respond to keyboard events. Here the events mean those defined in Dynamic .NET TWAIN. For example, navigate to the next image
            when the "Right" key is pressed.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.DynamicDotNetTwain.PDFConvertMode">
      <summary>
            Returns or sets mode of PDF convert.
            </summary>
      <exception cref="T:Dynamsoft.DotNet.TWAIN.TwainException">
            When an error occurs and IfThrowException property is true, an exception will be thrown.
            When IfThrowException property is false, please check ErrorCode and ErrorString.
            </exception>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.CancelDialog">
      <summary>
            Summary description for CancelDialog.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.CancelDialog.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.CancelDialog.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.CancelDialog.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.OneD">
      <summary>
            All supported 1D barcode formats.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.TwoD">
      <summary>
            All supported 2D barcode formats.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.All">
      <summary>
            All supported barcode formats.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.AZTEC">
      <summary>
            Aztec 2D barcode format.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.CODABAR">
      <summary>
            CODABAR 1D format.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.CODE_39">
      <summary>Code 39 1D format. </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.CODE_93">
      <summary>
            Code 93 1D format.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.CODE_128">
      <summary>Code 128 1D format. </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.DATAMATRIX">
      <summary>DataMatrix 2D barcode format. </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.EAN_8">
      <summary>EAN-8 1D format. </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.EAN_13">
      <summary>EAN-13 1D format. </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.ITF">
      <summary>ITF (Interleaved Two of Five) 1D format. </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.MAXICODE">
      <summary>
            MaxiCode 2D barcode format.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.PDF417">
      <summary>PDF417 format. </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.QR_CODE">
      <summary>QR Code 2D barcode format. </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.RSS_14">
      <summary>
            RSS 14 format.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.RSS_EXPANDED">
      <summary>
            RSS EXPANDED format.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.UPC_A">
      <summary>UPC-A 1D format. </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.UPC_E">
      <summary>UPC-E 1D format. </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.Barcode.BarcodeFormat.UPC_EAN_EXTENSION">
      <summary>
            UPC/EAN extension format. Not a stand-alone format.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapType">
      <summary>
            Capabilities exist in many varieties but all have a Default Value, Current Value, and may have other values available that can be supported if selected. 
            To help categorize the supported values into clear structures, TWAIN defines four types of containers for capabilities: 
            TW_ONEVALUE, TW_ARRAY, TW_RANGE and TW_ENUMERATION.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapType.TWON_NONE">
      <summary>
            Nothing.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapType.TWON_ARRAY">
      <summary>
            A rectangular array of values that describe a logical item. It is similar to the TW_ONEVALUE because the current and default values are the same and 
            there are no other values to select from. For example, a list of the names, such as the supported capabilities list returned by the CAP_SUPPORTEDCAPS 
            capability, would use this type of container. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapType.TWON_ENUMERATION">
      <summary>
            This is the most general type because it defines a list of values from which the Current Value can be chosen. 
            The values do not progress uniformly through a range and there is not a consistent step size between the values. 
            For example, if a Source's resolution options do not occur in even step sizes then an enumeration would be used (for example, 150, 400, and 600). 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapType.TWON_ONEVALUE">
      <summary>
            A single value whose current and default values are coincident. The range of available values for this type of capability is simply this single value.
            For example, a capability that indicates the presence of a document feeder could be of this type.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapType.TWON_RANGE">
      <summary>
            Many capabilities allow users to select their current value from a range of regularly spaced values. 
            The capability can specify the minimum and maximum acceptable values and the incremental step size between the values.
            For example, resolution might be supported from 100 to 600 in steps of 50 (100, 150, 200, ..., 550, 600). 
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapability">
      <summary>
            Capabilities.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_NONE">
      <summary>
            Nothing.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_XFERCOUNT">
      <summary>
            The application is willing to accept this number of images.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_COMPRESSION">
      <summary>
            Allows the application and Source to identify which compression schemes they have in
            common for Buffered Memory and File transfers.
            Note for File transfers:
            Since only certain file formats support compression, this capability must be negotiated after
            setting the desired file format with ICAP_IMAGEFILEFORMAT.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PIXELTYPE">
      <summary>
            The type of pixel data that a Source is capable of acquiring (for example, black and white, gray, RGB, etc.).
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_UNITS">
      <summary>
            Unless a quantity is dimensionless or uses a specified unit of measure, ICAP_UNITS determines
            the unit of measure for all quantities.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_XFERMECH">
      <summary>
            Allows the application and Source to identify which transfer mechanisms the source supports.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_AUTHOR">
      <summary>
            The name or other identifying information about the Author of the image. It may include a copyright string.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_CAPTION">
      <summary>
            A general note about the acquired image.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_FEEDERENABLED">
      <summary>
            If TRUE, Source must acquire data from the document feeder acquire area and other feeder 
            capabilities can be used. If FALSE, Source must acquire data from the non-feeder acquire area 
            and no other feeder capabilities can be used.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_FEEDERLOADED">
      <summary>
            Reflect whether there are documents loaded in the Source&#x2019;s feeder.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_TIMEDATE">
      <summary>
            The date and time the image was acquired.
            
            Stored in the form &#x201C;YYYY/MM/DD HH:mm:SS.sss&#x201D; where YYYY is the year, MM is the 
            numerical month, DD is the numerical day, HH is the hour, mm is the minute, SS is the second, 
            and sss is the millisecond.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_SUPPORTEDCAPS">
      <summary>
            Returns a list of all the capabilities for which the Source will answer inquiries. Does not indicate
            which capabilities the Source will allow to be set by the application. Some capabilities can only
            be set if certain setup work has been done so the Source cannot globally answer which
            capabilities are &#x201C;set-able.&#x201D;
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_EXTENDEDCAPS">
      <summary>
            Allows the application and Source to negotiate capabilities to be used in States 5 and 6.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_AUTOFEED">
      <summary>
            If TRUE, the Source will automatically feed the next page from the document feeder after the
            number of frames negotiated for capture from each page are acquired. CAP_FEEDERENABLED
            must be TRUE to use this capability.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_CLEARPAGE">
      <summary>
            If TRUE, the Source will eject the current page being acquired from and will leave the feeder
            acquire area empty.
            If CAP_AUTOFEED is TRUE, a fresh page will be advanced.
            CAP_FEEDERENABLED must equal TRUE to use this capability.
            This capability must have been negotiated as an extended capability to be used in States 5 and 6.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_FEEDPAGE">
      <summary>
            If TRUE, the Source will eject the current page and advance the next page in the document feeder
            into the feeder acquire area.
            If CAP_AUTOFEED is TRUE, the same action just described will occur and CAP_AUTOFEED will
            remain active.
            CAP_FEEDERENABLED must equal TRUE to use this capability.
            This capability must have been negotiated as an extended capability to be used in States 5 and 6.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_REWINDPAGE">
      <summary>
            If TRUE, the Source will return the current page to the input side of the document feeder and
            feed the last page from the output side of the feeder back into the acquisition area.
            If CAP_AUTOFEED is TRUE, automatic feeding will continue after all negotiated frames from this
            page are acquired.
            CAP_FEEDERENABLED must equal TRUE to use this capability.
            This capability must have been negotiated as an extended capability to be used in States 5 and 6.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_INDICATORS">
      <summary>
            If TRUE, the Source will display a progress indicator during acquisition and transfer, regardless
            of whether the Source&#x2019;s user interface is active. If FALSE, the progress indicator will be
            suppressed if the Source&#x2019;s user interface is inactive.
            The Source will continue to display device-specific instructions and error messages even with
            the Source user interface and progress indicators turned off.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_SUPPORTEDCAPSEXT">
      <summary>
            Returns a list of all the capabilities for which the Source will answer inquiries. Does not indicate
            which capabilities the Source will allow to be set by the application. Some capabilities can only
            be set if certain setup work has been done so the Source cannot globally answer which
            capabilities are &#x201C;set-able.&#x201D;
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PAPERDETECTABLE">
      <summary>
            This capability determines whether the device has a paper sensor that can detect documents on the ADF or Flatbed.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_UICONTROLLABLE">
      <summary>
            If TRUE, indicates that this Source supports acquisition with the UI disabled; i.e.,
            TW_USERINTERFACE&#x2019;s ShowUI field can be set to FALSE. If FALSE, indicates that this Source
            can only support acquisition with the UI enabled.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_DEVICEONLINE">
      <summary>
            If TRUE, the physical hardware (e.g., scanner, digital camera, image database, etc.) that
            represents the image source is attached, powered on, and communicating.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_AUTOSCAN">
      <summary>
            This capability is intended to boost the performance of a Source. The fundamental assumption
            behind AutoScan is that the device is able to capture the number of images indicated by the
            value of CAP_XFERCOUNT without waiting for the Application to request the image transfers.
            This is only possible if the device has internal buffers capable of caching the images it captures.
            The default behavior is undefined, because some high volume devices are incapable of anything
            but CAP_AUTOSCAN being equal to TRUE. However, if a Source supports FALSE, it should use it
            as the mandatory default, since this best describes the behavior of pre-1.8 TWAIN Applications.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_THUMBNAILSENABLED">
      <summary>
            Allows an application to request the delivery of thumbnail representations for the set of images
            that are to be delivered.
            Setting CAP_THUMBNAILSENABLED to TRUE turns on thumbnail mode. Images transferred
            thereafter will be sent at thumbnail size (exact thumbnail size is determined by the Data Source).
            Setting this capability to FALSE turns thumbnail mode off and returns full size images.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_DUPLEX">
      <summary>
            This indicates whether the scanner supports duplex. If so, it further indicates whether one-path
            or two-path duplex is supported.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_DUPLEXENABLED">
      <summary>
            The user can set the duplex option to be TRUE or FALSE. If TRUE, the scanner scans both sides
            of a paper; otherwise, the scanner will scan only one side of the image.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_ENABLEDSUIONLY">
      <summary>
            Allows an application to query a source to see if it implements the new user interface settings dialog. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_ENDORSER">
      <summary>
            Allows the application to specify the starting endorser / imprinter number. All other endorser/
            imprinter properties should be handled through the data source&#x2019;s user interface.
            The user can set the starting number for the endorser.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_ALARMS">
      <summary>
            Turns specific audible alarms on and off.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_ALARMVOLUME">
      <summary>
            The volume of a device&#x2019;s audible alarm. Note that this control affects the volume of all alarms;
            no specific volume control for individual types of alarms is provided.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_AUTOMATICCAPTURE">
      <summary>
            The number of images to automatically capture. This does not refer to the number of images to
            be sent to the Application, use CAP_XFERCOUNT for that.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_TIMEBEFOREFIRSTCAPTURE">
      <summary>
            For automatic capture, this value selects the number of milliseconds before the first picture is to
            be taken, or the first image is to be scanned.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_TIMEBETWEENCAPTURES">
      <summary>
            For automatic capture, this value selects the milliseconds to wait between pictures taken, or images scanned.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_CLEARBUFFERS">
      <summary>
            CapGet() reports the presence of data in the scanner's buffers. CapSet() with a value of TWCB_CLEAR immediately clears the buffers.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_MAXBATCHBUFFERS">
      <summary>
            Describes the number of pages that the scanner can buffer when CAP_AUTOSCAN is enabled.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_DEVICETIMEDATE">
      <summary>
            The date and time of the device&#x2019;s clock.
            Managed in the form &#x201C;YYYY/MM/DD HH:mm:SS:sss&#x201D; where YYYY is the year, MM is the
            numerical month, DD is the numerical day, HH is the hour, mm is the minute, SS is the second,
            and sss is the millisecond.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_POWERSUPPLY">
      <summary>
            CapGet() reports the kinds of power available to the device. CapGetCurrent() reports the current power supply in use.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_CAMERAPREVIEWUI">
      <summary>
            This capability queries the Source for UI support for preview mode. If TRUE, the Source supports preview UI.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_SERIALNUMBER">
      <summary>
            A string containing the serial number of the currently selected device in the Source. Multiple
            devices may all report the same serial number.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PRINTER">
      <summary>
            CapGet() returns the current list of available printer devices, along with the one currently being used for negotiation. 
            CapSet() selects the current device for negotiation, and optionally constrains the list.
            Top/Bottom refers to duplex devices, and indicates if the printer is writing on the top or the bottom of the sheet of paper. 
            Simplex devices use the top settings. Before/After indicates whether printing occurs before or after the sheet of paper has been scanned.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PRINTERENABLED">
      <summary>
            Turns the current CAP_PRINTER device on or off.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PRINTERINDEX">
      <summary>
            The User can set the starting number for the current CAP_PRINTER device.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PRINTERMODE">
      <summary>
            Specifies the appropriate current CAP_PRINTER device mode.
            Note:
            &#x2022; TWPM_SINGLESTRING specifies that the printed text will consist of a single string.
            &#x2022; TWPM _MULTISTRING specifies that the printed text will consist of an enumerated list of
            strings to be printed in order.
            &#x2022; TWPM _COMPOUNDSTRING specifies that the printed string will consist of a compound of a
            String followed by a value followed by a suffix string.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PRINTERSTRING">
      <summary>
            Specifies the string(s) that are to be used in the string component when the current
            CAP_PRINTER device is enabled.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_PRINTERSUFFIX">
      <summary>
            Specifies the string that shall be used as the current CAP_PRINTER device&#x2019;s suffix.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_LANGUAGE">
      <summary>
            Allows Application and Source to identify which languages they have in common for the exchange of string data, 
            and to select the language of the internal UI. Since the TWLG_xxxx codes include language and country data, there is no separate 
            capability for selecting the country.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_FEEDERALIGNMENT">
      <summary>
            Helps the Application determine any special actions it may need to take when negotiating
            frames with the Source. Allowed values are listed in <see cref="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederAlignment"/>.
            TWFA_NONE: The alignment is free-floating. Applications should assume
            that the origin for frames is on the left.
            TWFA_LEFT: The alignment is to the left.
            TWFA_CENTER: The alignment is centered. This means that the paper will
            be fed in the middle of the ICAP_PHYSICALWIDTH of the
            device. If this is set, then the Application should calculate
            any frames with a left offset of zero.
            TWFA_RIGHT: The alignment is to the right.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_FEEDERORDER">
      <summary>
            TWFO_FIRSTPAGEFIRST if the feeder starts with the top of the first page.
            TWFO_LASTPAGEFIRST is the feeder starts with the top of the last page.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_REACQUIREALLOWED">
      <summary>
            Indicates whether the physical hardware (e.g. scanner, digital camera) is capable of acquiring
            multiple images of the same page without changes to the physical registration of that page.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_BATTERYMINUTES">
      <summary>
            The minutes of battery power remaining to the device.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.CAP_BATTERYPERCENTAGE">
      <summary>
            When used with CapGet(), return the percentage of battery power level on camera. If -1 is returned, it indicates that the battery is not present. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_AUTOBRIGHT">
      <summary>
            TRUE enables and FALSE disables the Source&#x2019;s Auto-brightness function (if any).
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BRIGHTNESS">
      <summary>
            The brightness values available within the Source.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_CONTRAST">
      <summary>
            The contrast values available within the Source.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_CUSTHALFTONE">
      <summary>
            Specifies the square-cell halftone (dithering) matrix the Source should use to halftone the image.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_EXPOSURETIME">
      <summary>
            Specifies the exposure time used to capture the image, in seconds.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_FILTER">
      <summary>
            Describes the color characteristic of the subtractive filter applied to the image data. Multiple
            filters may be applied to a single acquisition.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_FLASHUSED">
      <summary>
            Specifies whether or not the image was acquired using a flash.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_GAMMA">
      <summary>
            Gamma correction value for the image data.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_HALFTONES">
      <summary>
            A list of names of the halftone patterns available within the Source.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_HIGHLIGHT">
      <summary>
            Specifies which value in an image should be interpreted as the lightest &#x201C;highlight.&#x201D; All values
            &#x201C;lighter&#x201D; than this value will be clipped to this value. Whether lighter values are smaller or
            larger can be determined by examining the Current value of ICAP_PIXELFLAVOR.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_IMAGEFILEFORMAT">
      <summary>
            Informs the application which file formats the Source can generate (CapGet()). Tells the Source which file formats the application can handle (CapSet()).
            TWFF_TIFF Used for document 
            TWFF_PICT Native Macintosh 
            TWFF_BMP Native Microsoft 
            TWFF_XBM Used for document 
            TWFF_JFIF Wrapper for JPEG 
            TWFF_FPX FlashPix, used with digital 
            TWFF_TIFFMULTI Multi-page TIFF files
            TWFF_PNG An image format standard intended for use on the web, replaces GIF
            TWFF_SPIFF A standard from JPEG, intended to replace JFIF, also supports JBIG
            TWFF_EXIF File format for use with digital cameras. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_LAMPSTATE">
      <summary>
            TRUE means the lamp is currently, or should be set to ON. Sources may not support CapSet() operations. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_LIGHTSOURCE">
      <summary>
            Describes the general color characteristic of the light source used to acquire the image.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_ORIENTATION">
      <summary>
            Defines which edge of the "paper" the image's "top" is aligned with. This information is used to adjust the frames to match the 
            scanning orientation of the paper. For instance, if an ICAP_SUPPORTEDSIZE of TWSS_ISOA4 has been negotiated, 
            and ICAP_ORIENTATION is set to TWOR_LANDSCAPE, then the Source must rotate the frame it downloads to the scanner to reflect the 
            orientation of the paper. Please note that setting ICAP_ORIENTATION does not affect the values reported by ICAP_FRAMES; 
            it just causes the Source to use them in a different way. The upper-left of the image is defined as the location where both the primary and 
            secondary scans originate. (The X axis is the primary scan direction and the Y axis is the secondary scan direction.)
            For a flatbed scanner, the light bar moves in the secondary scan direction. For a handheld scanner, the scanner is drug in the 
            secondary scan direction. For a digital camera, the secondary direction is the vertical axis when the viewed image is considered upright. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PHYSICALWIDTH">
      <summary>
            The maximum physical width (X-axis) the Source can acquire (measured in units of ICAP_UNITS).
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PHYSICALHEIGHT">
      <summary>
            The maximum physical height (Y-axis) the Source can acquire (measured in units of ICAP_UNITS).
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_SHADOW">
      <summary>
            Specifies which value in an image should be interpreted as the darkest &#x201C;shadow.&#x201D; All values 
            &#x201C;darker&#x201D; than this value will be clipped to this value.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_FRAMES">
      <summary>
            The list of frames the Source will acquire on each page.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_XNATIVERESOLUTION">
      <summary>
            The native optical resolution along the X-axis of the device being controlled by the Source. Most
            devices will respond with a single value (TW_ONEVALUE).
            This is NOT a list of all resolutions that can be generated by the device. Rather, this is the
            resolution of the device&#x2019;s optics. Measured in units of pixels per unit as defined by
            ICAP_UNITS (pixels per TWUN_PIXELS yields dimensionless data).
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_YNATIVERESOLUTION">
      <summary>
            The native optical resolution along the Y-axis of the device being controlled by the Source.
            Measured in units of pixels per unit as defined by ICAP_UNITS (pixels per TWUN_PIXELS
            yields dimensionless data).
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_XRESOLUTION">
      <summary>
            All the X-axis resolutions the Source can provide.
            Measured in units of pixels per unit as defined by ICAP_UNITS (pixels per TWUN_PIXELS
            yields dimensionless data). That is, when the units are TWUN_PIXELS, both
            ICAP_XRESOLUTION and ICAP_YRESOLUTION shall report 1 pixel/pixel. Some data sources
            like to report the actual number of pixels that the device reports, but that response is more
            appropriate in ICAP_PHYSICALHEIGHT and ICAP_PHYSICALWIDTH.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_YRESOLUTION">
      <summary>
            All the Y-axis resolutions the Source can provide.
            Measured in units of pixels per unit as defined by ICAP_UNITS (pixels per TWUN_PIXELS
            yields dimensionless data). That is, when the units are TWUN_PIXELS, both
            ICAP_XRESOLUTION and ICAP_YRESOLUTION shall report 1 pixel/pixel. Some data sources
            like to report the actual number of pixels that the device reports, but that response is more
            appropriate in ICAP_PHYSICALHEIGHT and ICAP_PHYSICALWIDTH.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_MAXFRAMES">
      <summary>
            The maximum number of frames the Source can provide or the application can accept per page. 
            This is a bounding capability only. It does not establish current or future behavior.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_TILES">
      <summary>
            This is used with buffered memory transfers. If TRUE, Source can provide application with tiled image data.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BITORDER">
      <summary>
            Specifies how the bytes in an image are filled by the Source. TWBO_MSBFIRST indicates that the leftmost bit in the byte (usually bit 7) is 
            the byte's Most Significant Bit.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_CCITTKFACTOR">
      <summary>
            Used for CCITT Group 3 2-dimensional compression. The &#x2018;K&#x2019; factor indicates how often the
            new compression baseline should be re-established. A value of 2 or 4 is common in facsimile
            communication. A value of zero in this field will indicate an infinite K factor&#x2014;the baseline is
            only calculated at the beginning of the transfer.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_LIGHTPATH">
      <summary>
            Describes whether the image was captured transmissively or reflectively.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PIXELFLAVOR">
      <summary>
            Sense of the pixel whose numeric value is zero (minimum data value). 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PLANARCHUNKY">
      <summary>
            Allows the application and Source to identify which color data formats are available. There are
            two options, &#x201C;planar&#x201D; and &#x201C;chunky.&#x201D;
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_ROTATION">
      <summary>
            How the Source can/should rotate the scanned image data prior to transfer. This doesn&#x2019;t use
            ICAP_UNITS. It is always measured in degrees. Any applied value is additive with any
            rotation specified in ICAP_ORIENTATION.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_SUPPORTEDSIZES">
      <summary>
            For devices that support fixed frame sizes. 
            Defined sizes match typical page sizes. This specifies the size(s) the Source can/should use to acquire image data. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_THRESHOLD">
      <summary>
            Specifies the dividing line between black and white. This is the value the Source will use to
            threshold, if needed, when ICAP_PIXELTYPE = TWPT_BW.
            The value is normalized so there are no units of measure associated with this ICAP.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_XSCALING">
      <summary>
            All the X-axis scaling values available. A value of &#x2018;1.0&#x2019; is equivalent to 100% scaling. Do not use values less than or equal to zero.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_YSCALING">
      <summary>
            All the Y-axis scaling values available. A value of &#x2018;1.0&#x2019; is equivalent to 100% scaling. Do not use values less than or equal to zero. 
            There are no units inherent with this data as it is normalized to 1.0 being &#x201C;unscaled.&#x201D;
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BITORDERCODES">
      <summary>
            Used for CCITT data compression only. Indicates the bit order representation of the stored compressed codes.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PIXELFLAVORCODES">
      <summary>
            Used only for CCITT data compression. Specifies whether the compressed codes&#x2019; pixel &#x201C;sense&#x201D; 
            will be inverted from the Current value of ICAP_PIXELFLAVOR prior to transfer.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_JPEGPIXELTYPE">
      <summary>
            Allows the application and Source to agree upon a common set of color descriptors that are 
            made available by the Source. This ICAP is only useful for JPEG-compressed buffered memory image transfers.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_TIMEFILL">
      <summary>
            Used only with CCITT data compression. Specifies the minimum number of words of compressed codes (compressed data) to be transmitted per line.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BITDEPTH">
      <summary>
            Specifies the pixel bit depths for the Current value of ICAP_PIXELTYPE. For example, when
            using ICAP_PIXELTYPE = TWPT_GRAY, this capability specifies whether this is 8-bit gray or 4-bit gray.
            This depth applies to all the data channels (for instance, the R, G, and B channels will all have
            this same bit depth for RGB data).
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BITDEPTHREDUCTION">
      <summary>
            Specifies the Reduction Method the Source should use to reduce the bit depth of the data. Most
            commonly used with ICAP_PIXELTYPE = TWPT_BW to reduce gray data to black and white.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_UNDEFINEDIMAGESIZE">
      <summary>
            If TRUE the Source will issue a MSG_XFERREADY before starting the scan.
            Note: The Source may need to scan the image before initiating the transfer. This is the case if
            the scanned image is rotated or merged with another scanned image.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_EXTIMAGEINFO">
      <summary>
            Allows the application to query the data source to see if it supports extended image attribute capabilities, 
            such as Barcode Recognition, Shaded Area Detection and Removal, Skew detection and Removal, and so on.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_MINIMUMHEIGHT">
      <summary>
            Allows the source to define the minimum height (Y-axis) that the source can acquire.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_MINIMUMWIDTH">
      <summary>
            Allows the source to define theminimum width (X-axis) that the source can acquire.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_AUTODISCARDBLANKPAGES">
      <summary>
            Use this capability to have the Source discard blank images. The Application never sees these
            images during the scanning session.
            TWBP_DISABLE &#x2013; this must be the default state for the Source. It indicates that all images will
            be delivered to the Application, none of them will be discarded.
            TWBP_AUTO &#x2013; if this is used, then the Source will decide if an image is blank or not and discard
            as appropriate.
            If the specified value is a positive number in the range 0 to 231&#x2013;1, then this capability will use it
            as the byte size cutoff point to identify which images are to be discarded. If the size of the image
            is less than or equal to this value, then it will be discarded. If the size of the image is greater
            than this value, then it will be kept so that it can be transferred to the Application.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_FLIPROTATION">
      <summary>
            Flip rotation is used to properly orient images that flip orientation every other image.
            TWFR_BOOK The images to be scanned are viewed in book form, flipping each page from left to right or right to left.
            TWFR_FANFOLD The images to be scanned are viewed in fanfold paper style, flipping each page up or down. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BARCODEDETECTIONENABLED">
      <summary>
            Turns bar code detection on and off.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_SUPPORTEDBARCODETYPES">
      <summary>
            Provides a list of bar code types that can be detected by the current Data Source.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BARCODEMAXSEARCHPRIORITIES">
      <summary>
            The maximum number of supported search priorities.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BARCODESEARCHPRIORITIES">
      <summary>
            A prioritized list of bar code types dictating the order in which bar codes will be sought.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BARCODESEARCHMODE">
      <summary>
            Restricts bar code searching to certain orientations, or prioritizes one orientation over the other.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BARCODEMAXRETRIES">
      <summary>
            Restricts the number of times a search will be retried if none are found on each page.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_BARCODETIMEOUT">
      <summary>
            Restricts the total time spent on searching for a bar code on each page.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_ZOOMFACTOR">
      <summary>
            When used with CapGet(), returns all camera supported lens zooming range. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PATCHCODEDETECTIONENABLED">
      <summary>
            Turns patch code detection on and off.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_SUPPORTEDPATCHCODETYPES">
      <summary>
            A list of patch code types that may be detected by the current Data Source.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PATCHCODEMAXSEARCHPRIORITIES">
      <summary>
            The maximum number of supported search priorities.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PATCHCODESEARCHPRIORITIES">
      <summary>
            A prioritized list of patch code types dictating the order in which patch codes will be sought.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PATCHCODESEARCHMODE">
      <summary>
            Restricts patch code searching to certain orientations, or prioritizes one orientation over the other.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PATCHCODEMAXRETRIES">
      <summary>
            Restricts the number of times a search will be retried if none are found on each page.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_PATCHCODETIMEOUT">
      <summary>
            Restricts the total time spent on searching for a patch code on each page.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_FLASHUSED2">
      <summary>
            For devices that support flash. CapSet() selects the flash to be used (if any). CapGet() reports the current setting.
            This capability replaces ICAP_FLASHUSED, which is only able to negotiate the flash being on or off. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_IMAGEFILTER">
      <summary>
            For devices that support image enhancement filtering. This capability selects the algorithm used to improve the quality of the image.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_NOISEFILTER">
      <summary>
            For devices that support noise filtering. This capability selects the algorithm used to remove noise.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_OVERSCAN">
      <summary>
            Overscan is used to scan outside of the boundaries described by ICAP_FRAMES, and is used to help acquire image data that 
            may be lost because of skewing.
            This is primarily of use for transport scanners which rely on edge detection to begin scanning. 
            If overscan is supported, then the device is capable of scanning in the inter-document gap to get the skewed image information. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_AUTOMATICBORDERDETECTION">
      <summary>
            Turns automatic border detection on and off.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_AUTOMATICDESKEW">
      <summary>
            Turns automatic deskew correction on and off.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapability.ICAP_AUTOMATICROTATE">
      <summary>
            When TRUE this capability depends on intelligent features within the Source to automatically 
            rotate the image to the correct position.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapLanguage">
      <summary>
            CAP_LANGUAGE values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes">
      <summary>
            TWAIN Supported sizes.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_NONE">
      <summary>
            0
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A4LETTER">
      <summary>
            1
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_B5LETTER">
      <summary>
            2
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_USLETTER">
      <summary>
            3
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_USLEGAL">
      <summary>
            4
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A5">
      <summary>
            5
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_B4">
      <summary>
            6
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_B6">
      <summary>
            7
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_USLEDGER">
      <summary>
            9
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_USEXECUTIVE">
      <summary>
            10
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A3">
      <summary>
            11
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_B3">
      <summary>
            12
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A6">
      <summary>
            13
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C4">
      <summary>
            14
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C5">
      <summary>
            15
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C6">
      <summary>
            16
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_4A0">
      <summary>
            17
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_2A0">
      <summary>
            18
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A0">
      <summary>
            19
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A1">
      <summary>
            20
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A2">
      <summary>
            21
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A4">
      <summary>
            1
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A7">
      <summary>
            22
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A8">
      <summary>
            23
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A9">
      <summary>
            24
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_A10">
      <summary>
            25
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB0">
      <summary>
            26
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB1">
      <summary>
            27
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB2">
      <summary>
            28
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB3">
      <summary>
            12
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB4">
      <summary>
            6
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB5">
      <summary>
            29
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB6">
      <summary>
            7
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB7">
      <summary>
            30
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB8">
      <summary>
            31
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB9">
      <summary>
            32
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_ISOB10">
      <summary>
            33
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB0">
      <summary>
            34
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB1">
      <summary>
            35
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB2">
      <summary>
            36
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB3">
      <summary>
            37
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB4">
      <summary>
            38
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB5">
      <summary>
            2
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB6">
      <summary>
            39
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB7">
      <summary>
            40
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB8">
      <summary>
            41
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB9">
      <summary>
            41
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_JISB10">
      <summary>
            43
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C0">
      <summary>
            44
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C1">
      <summary>
            45
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C2">
      <summary>
            46
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C3">
      <summary>
            47
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C7">
      <summary>
            48
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C8">
      <summary>
            49
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C9">
      <summary>
            50
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_C10">
      <summary>
            51
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_USSTATEMENT">
      <summary>
            52
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_BUSINESSCARD">
      <summary>
            53
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSupportedSizes.TWSS_MAXSIZE">
      <summary>
            54
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapDuplex">
      <summary>
            ICAP_DUPLEX values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederAlignment">
      <summary>
            CAP_FEEDERALIGNMENT values.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederAlignment.TWFA_NONE">
      <summary>
            The alignment is free-floating. Applications should assume that the origin for frames is on the left.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederAlignment.TWFA_LEFT">
      <summary>
            The alignment is to the left.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederAlignment.TWFA_CENTER">
      <summary>
            The alignment is centered. This means that the paper will be fed in the middle of the ICAP_PHYSICALWIDTH of the 
            device. If this is set, then the Application should calculate any frames with a left offset of zero.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederAlignment.TWFA_RIGHT">
      <summary>
            The alignment is to the right.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederOrder">
      <summary>
            CAP_FEEDERORDER values.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederOrder.TWFO_FIRSTPAGEFIRST">
      <summary>
            The feeder starts with the top of the first page.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapFeederOrder.TWFO_LASTPAGEFIRST">
      <summary>
            The feeder starts with the top of the last page.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapSetupXFer">
      <summary>
            ICAP_XFERMECH values.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSetupXFer.TWSX_NATIVE">
      <summary>
            Native transfers require the data to be transferred to a single large block of RAM. Therefore,
            they always face the risk of having an inadequate amount of RAM available to perform the transfer successfully.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSetupXFer.TWSX_FILE">
      <summary>
            Disk File Mode Transfers.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapSetupXFer.TWSX_MEMORY">
      <summary>
            Buffered Memory Mode Transfers.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat">
      <summary>
            ICAP_IMAGEFILEFORMAT values.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_TIFF">
      <summary>
            Used for document imaging.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_PICT">
      <summary>
            Native Macintosh format.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_BMP">
      <summary>
            Native Microsoft format.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_XBM">
      <summary>
            Used for document imaging.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_JFIF">
      <summary>
            Wrapper for JPEG images.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_FPX">
      <summary>
            FlashPix, used with digital cameras.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_TIFFMULTI">
      <summary>
            Multi-page TIFF files.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_PNG">
      <summary>
            An image format standard intended for use on the web, replaces GIF.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_SPIFF">
      <summary>
            A standard from JPEG, intended to replace JFIF, also supports JBIG.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_EXIF">
      <summary>
            File format for use with digital cameras.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_PDF">
      <summary>
            A file format from Adobe.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_JP2">
      <summary>
            A file format from the Joint Photographic Experts Group.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_DEJAVU">
      <summary>
            A file format from LizardTech.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFileFormat.TWFF_PDFA">
      <summary>
            A file format from Adobe.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapPrinter">
      <summary>
            CAP_PRINTER values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWCapPrinterMode">
      <summary>
            CAP_PRINTERMODE values.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapPrinterMode.TWPM_SINGLESTRING">
      <summary>
            Specifies that the printed text will consist of a single string.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapPrinterMode.TWPM_MULTISTRING">
      <summary>
            Specifies that the printed text will consist of an enumerated list of strings to be printed in order.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWCapPrinterMode.TWPM_COMPOUNDSTRING">
      <summary>
            Specifies that the printed string will consist of a compound of a String followed by a value followed by a suffix string.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapBitdepthReduction">
      <summary>
            ICAP_BITDEPTHREDUCTION values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapBitOrder">
      <summary>
            ICAP_BITORDER values.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapBitOrder.TWBO_MSBFIRST">
      <summary>
            Indicates that the leftmost bit in the byte (usually bit 7) is the byte&#x2019;s Most Significant Bit.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapFilterType">
      <summary>
            ICAP_FILTER values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapFlash">
      <summary>
            ICAP_FLASHUSED2 values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapFlipRotation">
      <summary>
            ICAP_FLIPROTATION values.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFlipRotation.TWFR_BOOK">
      <summary>
            The images to be scanned are viewed in book form, flipping each page from left to right or right to left.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapFlipRotation.TWFR_FANFOLD">
      <summary>
            The images to be scanned are viewed in fanfold paper style, flipping each page up or down.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapImageFilter">
      <summary>
            ICAP_IMAGEFILTER values.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapImageFilter.TWIF_LOWPASS">
      <summary>
            Good for halftone images.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapImageFilter.TWIF_BANDPASS">
      <summary>
            Good for improving text.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapImageFilter.TWIF_HIGHPASS">
      <summary>
            Good for improving fine lines.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapLightPath">
      <summary>
            ICAP_LIGHTPATH values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapLightSource">
      <summary>
            ICAP_LIGHTSOURCE values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWEIMagType">
      <summary>
            TWEI_MAGTYPE values. (MD_ means Mag Type) Added 2.0 
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapNoiseFilter">
      <summary>
            ICAP_NOISEFILTER values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapORientation">
      <summary>
            ICAP_ORIENTATION values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapOverscan">
      <summary>
            ICAP_OVERSCAN values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapPixelFlavor">
      <summary>
            ICAP_PIXELFLAVOR values.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapPixelFlavor.TWPF_CHOCOLATE">
      <summary>
            Zero pixel represents darkest shade.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWICapPixelFlavor.TWPF_VANILLA">
      <summary>
            Zero pixel represents lightest shade.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapPixelType">
      <summary>
            ICAP_PIXELTYPE values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapPlanarChunky">
      <summary>
            ICAP_PLANARCHUNKY values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWICapUNits">
      <summary>
            ICAP_UNITS values.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWQC">
      <summary>
            For query the operation that are supported by the data source on a capability .
            Application gets these through DG_CONTROL/DAT_CAPABILITY/MSG_QUERYSUPPORT
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWDataSourceStatus">
      <summary>
            Data source status.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWDataSourceStatus.TWDSS_CLOSED">
      <summary>
            Indicate the data source is closed. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWDataSourceStatus.TWDSS_OPENED">
      <summary>
            Indicate the data source is opened.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWDataSourceStatus.TWDSS_ENABLED">
      <summary>
            Indicate the data source is enabled. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWDataSourceStatus.TWDSS_ACQUIRING">
      <summary>
            Indicate the data source is acquiring image.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode">
      <summary>
            Barcode type
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODEX">
      <summary>
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODEY">
      <summary>
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODETEXT">
      <summary>
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODETYPE">
      <summary>
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODECOUNT">
      <summary>
            Returns the number of bar codes found on the document image. A 
            value of 0 means the bar code engine was enabled but that no bar 
            codes were found. A value of -1 means the bar code engine was not enabled.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODECONFIDENCE">
      <summary>
            This number reflects the degree of certainty the bar code engine has in 
            the accuracy of the information obtained from the scanned image and 
            ranges from 0 (no confidence) to 100 (supreme confidence). The Source may 
            return a value of -1 if it does not support confidence reporting.
            TWBCOR_ROT0 Normal reading orientation
            TWBCOR_ROT90 Rotated 90 degrees clockwise
            TWBCOR_ROT180 Rotated 180 degrees clockwise
            TWBCOR_ROT270 Rotated 270 degrees clockwise
            TWBCOR_ROTX The orientation is not known.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODEROTATION">
      <summary>
            The bar code&#x2019;s orientation on the scanned image is described in 
            reference to a Western-style interpretation of the image.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.TWEIBarcode.TWEI_BARCODETEXTLENGTH">
      <summary>
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTWndBorderStyle">
      <summary>
            Image window border style.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTWndBorderStyle.None">
      <summary>
            No border.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTWndBorderStyle.SingleFlat">
      <summary>
            Flat border.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTWndBorderStyle.Single3D">
      <summary>
            3D border.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType">
      <summary>
            TIFF file compression type.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_AUTO">
      <summary>
            Auto mode.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_NONE">
      <summary>
            Dump mode.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_RLE">
      <summary>
            CCITT modified Huffman RLE.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_FAX3">
      <summary>
            CCITT Group 3 fax encoding.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_T4">
      <summary>
            CCITT T.4 (TIFF 6 name).
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_FAX4">
      <summary>
            CCITT Group 4 fax encoding.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_T6">
      <summary>
            CCITT T.6 (TIFF 6 name).
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_LZW">
      <summary>
            Lempel Ziv and Welch.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTTIFFCompressionType.TIFF_JPEG">
      <summary>
            Jpeg
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTInterpolationMethod">
      <summary>
            The method to do interpolation.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize">
      <summary>
            PDF Page Size
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize.FLSA">
      <summary>
            American Foolscap format
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize.FLSE">
      <summary>
            European Foolscap format
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize.HALFLETTER">
      <summary>
            halfletter format
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize.ID_1">
      <summary>
            ISO 7810 ID-1 format (85.60 x 53.98 mm or 3.370 x 2.125 inch)
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize.ID_2">
      <summary>
            ISO 7810 ID-2 format (A7 rotated)
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFPageSize.ID_3">
      <summary>
            ISO 7810 ID-3 format (B7 rotated)
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat">
      <summary>
            Image type
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat.WEBTW_BMP">
      <summary>
            Native Microsoft format.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat.WEBTW_JPG">
      <summary>
            JPEG format.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat.WEBTW_TIF">
      <summary>
            Tagged Image File Format.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat.WEBTW_PNG">
      <summary>
            An image format standard intended for use on the web, replaces GIF.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTImageFileFormat.WEBTW_PDF">
      <summary>
            A file format from Adobe.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFCompressionType">
      <summary>
            PDF file compression type.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFCompressionType.enumAutoEncode">
      <summary>
            Auto mode.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFCompressionType.enumCCITTFax4Encode">
      <summary>
            CCITT Group 4 fax encoding.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFCompressionType.enumFlateEncode">
      <summary>
            flate encoding.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFCompressionType.enumJPEGEncode">
      <summary>
            JPEG encoding.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTPDFVersion">
      <summary>
            PDF file version.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTFitWindowType">
      <summary>
            FitWindow type
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTAnnotationType">
      <summary>
            Annotation type
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTAnnotationChangePosition">
      <summary>
            Change annotation position
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.DWTTextRotate">
      <summary>
            Rotate text annotaion
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.EnumSupportedDeviceType">
      <summary>
            Supported device type
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.EnumDeviceType">
      <summary>
            Current selected device type
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode">
      <summary>
            DynamicDotNetTWAIN error code.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.Succeed">
      <summary>
            Successful.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_SUCCESS">
      <summary>
            Successful.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_BUMMER">
      <summary>
            General error.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_LOWMEMORY">
      <summary>
            No enough memory to perform the required operation.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_NODS">
      <summary>
            Source Manager is unable to find the specified Source.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_MAXCONNECTIONS">
      <summary>
            Source is connected to maximum supported number of applications. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_OPERATIONERROR">
      <summary>
            Source or Source Manager reported an error to the user and handled the error. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_BADCAP">
      <summary>
            Capability is not supported by Source or the specified operation is not supported by the capability, or capability had dependencies on other capabilities and cannot be operated upon at this time. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_BADPROTOCOL">
      <summary>
            Unrecognized operation triplet. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_BADVALUE">
      <summary>
            Data parameter out of supported range. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_SEQERROR">
      <summary>
            Operation out of expected sequence.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_BADDEST">
      <summary>
            Unknown destination in DSM_Entry.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_CAPUNSUPPORTED">
      <summary>
            Capability is not supported by source. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_CAPBADOPERATION">
      <summary>
            Operation is not supported by the capability. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_CAPSEQERROR">
      <summary>
            Capability has dependencies on other capabilities and cannot be operated upon at this time. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_DENIED">
      <summary>
            File System operation is denied (file is protected).
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_FILEEXISTS">
      <summary>
            Operation failed because file already exists. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_FILENOTFOUND">
      <summary>
            File not found. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_NOTEMPTY">
      <summary>
            Operation failed because directory is not empty. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_PAPERJAM">
      <summary>
            The feeder is jammed. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_PAPERDOUBLEFEED">
      <summary>
            The feeder detected multiple pages. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_FILEWRITEERROR">
      <summary>
            Error writing file. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWCC_CHECKDEVICEONLINE">
      <summary>
            The device went offline prior to or during this operation.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_GeneralError">
      <summary>
             General error.
             </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_SystemException">
      <summary>
            System exception.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_INVALID_LICENSE">
      <summary>
            Invalid license.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_OPENDSM">
      <summary>
            Can not open Source Manager. TWain_32.dll is missing or is in use by another application. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_SEQUENCE">
      <summary>
            Sequence error. The operation can not be performed upon the current Source Manager or Source state. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_CANCEL">
      <summary>
            User cancelled the operation.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_INDEX">
      <summary>
            Invalid index.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_VALUE">
      <summary>
            Invalid value.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_BADPARAMETER">
      <summary>
            Data parameter out of supported range. 
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_MAXIMAGESEXCEEDED">
      <summary>
            The number of images exceeds the max value.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_MOUSESHAPETRUE">
      <summary>
            MouseShape is true. Need to set MouseShape to false.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_EXTENSION">
      <summary>
            Unrecognized file extension.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_BMP">
      <summary>
            BMP format error or not supported.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_NOTSUPPORTIMAGE">
      <summary>
            Image format is not supported.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_INVALID_IMAGE">
      <summary>
            Invalid image index. Original image does't exist.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_UPLOADFAILEDFORTOOBIG">
      <summary>
            The file too big for upload.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_FTP_HANDSHAKEEXCEPTION">
      <summary>
            Handshake exception.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_FTP_INVALIDPROXYUSERNAMEORPASSWORD">
      <summary>
            Proxy username or password invalid.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_FTP_PROTOCOLREQUESTNOTPASS">
      <summary>
            Protocol request is not passed.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_FTP_NOTCONNECTREMOTESERVER">
      <summary>
            Can't connect to remote server.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_FTP_MALFORMEDPASVRESULT">
      <summary>
            Malformed PASV result:
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_FTP_MALFORMEDPASVRESULTNOTSUPPORTED">
      <summary>
            Malformed PASV result (not supported):
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_PDF_ERRORINREADPDF">
      <summary>
            Error in reading PDF file.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_PDF_ERRORINWRITEPDF">
      <summary>
            Error in writing PDF file.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_IMAGE_ERRORBIGIMAGE">
      <summary>
            The image too big for resample.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.WEBCAM_ERROR">
      <summary>
            The image too big for resample.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.OCR_ERROR">
      <summary>
            Failed to do OCR.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_DEVICE_NOT_SUPPORT">
      <summary>
            The current selected device type not supports the method or property.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.Enums.ErrorCode.TWERR_PRINT_NO_PAGE">
      <summary>
            There is no page to be printed.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.TwainException">
      <summary>
            DynamicDotNetTWAIN exception class definition.
            </summary>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.TwainException.#ctor">
      <summary>
            Initializes a new instance of the TwainException class.
            </summary>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.TwainException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the TwainException class with a specified error message.
            </summary>
      <param name="strError">The message that describes the error.</param>
    </member>
    <member name="M:Dynamsoft.DotNet.TWAIN.TwainException.#ctor(System.String,Dynamsoft.DotNet.TWAIN.Enums.ErrorCode)">
      <summary>
            Initializes a new instance of the TwainException class with a specified error message and error code.
            </summary>
      <param name="strError">The message that describes the error.</param>
      <param name="errCode">The error code.</param>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.TwainException.Code">
      <summary>
            Get and set DynamicDotNetTWAIN error code.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.TwainException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
    </member>
    <member name="P:Dynamsoft.DotNet.TWAIN.TwainException.StackTrace">
      <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnPostTransferHandler"><summary>
            Occurs when each image is scanned.
            </summary><remarks>
            This is the place to check <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.PendingXFERs"/> property.
            <para>
            This is the place to read the properties of image information: <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageBitsPerPixel"/> property, 
            <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImagePixelType"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLength"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageWidth"/> property, 
            <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageXResolution"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageYResolution"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutDocumentNumber"/> property, 
            <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutFrameLeft"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutFrameTop"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutFrameRight"/> property, 
            <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutFrameBottom"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutPageNumber"/> property, <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.ImageLayoutFrameNumber"/> property. 
            </para>
            This is also the place to call <see cref="M:Dynamsoft.DotNet.TWAIN.Interface.ITwain.CancelAllPendingTransfers"/>.
            </remarks><seealso cref="!:OnPreAllTransfers"/> Event, <seealso cref="!:OnPreTransfer"/> Event, <seealso cref="!:OnPostAllTransfers"/> Event, 
            <seealso cref="!:OnTransferCancelled"/> Event, <seealso cref="!:OnTransferError"/> Event.
        </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnPreTransferHandler">
      <summary>
            Occurs before each image is scanned.
            </summary>
      <remarks>
            This is the place to read the properties of image information: ImageBitsPerPixel property, 
            ImagePixelType property, ImageLength property, ImageWidth property, ImageXResolution property, 
            ImageYResolution property, ImageLayoutDocumentNumber property, ImageLayoutFrameLeft property, 
            ImageLayoutFrameTop property, ImageLayoutFrameRight property, ImageLayoutFrameBottom property, 
            ImageLayoutPageNumber property, ImageLayoutFrameNumber property. 
            <para>
            This is also the place to call CancelAllPendingTransfers().
            </para>
            </remarks>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnPreAllTransfersHandler">
      <summary>
            Occurs before all images are scanned.
            </summary>
      <remarks>
            Multiple transfers may occur when ADF(Auto Document Feeder) is enabled or there are more than one frames in a page.
            In those cases, more than one OnPreTransfer Event will be fired, and only one OnPreAllTransfers Event will be fired.
            This is the place to call CancelAllPendingTransfers().
            </remarks>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnPostAllTransfersHandler">
      <summary>
            Occurs after all images are scanned.
            </summary>
      <remarks>
            Multiple transfers may occur when ADF(Auto Document Feeder) is enabled or there are more than one frames in a page. 
            In those cases, more than one OnPostTransfer Event will be fired, and only one OnPostAllTransfers Event will be fired.
            </remarks>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnTransferErrorHandler">
      <summary>
            Occurs when an error occurs during the process of transfer.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnTransferCancelledHandler">
      <summary>
            Occurs when the transfer is cancelled by the user.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnMouseClickHandler">
      <summary>
            Occurs when the mouse clicks on an image.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <remarks>
            Short sImageIndex &gt;=0. When the value of sImageIndex equals -1, it indicates that no image is clicked.
            </remarks>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnMouseMoveHandler">
      <summary>
            Occurs when the mouse moves onto an image.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <remarks>
            Short sImageIndex &gt;=0. When the value of sImageIndex equals -1, it indicates that mouse is not on any image.
            </remarks>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnInternetTransferPercentageHandler">
      <summary>
            Occurs when uploading or downloading images via HTTP or FTP.
            </summary>
      <param name="sPercent">Specifies upload or download progress.</param>
      <param name="cancel">Specifies if canncel upload or download. If you want to cancel upload or download, please set its member Cancelled value as true.</param>
      <remarks>
            This event is triggered when user uploads or downloads images via HTTP or FTP.
            </remarks>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnMouseRightClickHandler">
      <summary>
            Occurs when the mouse right clicks on an image.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <remarks>
            Short sImageIndex &gt;=0. When the value of sImageIndex equals -1, it indicates that no image is right-clicked.
            </remarks>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnMouseRightClickHandlerEx">
      <summary>
            Occurs when the mouse right clicks on an image.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <param name="args">Provide data for OnMouseRightClick event.</param>
      <remarks>
            Short sImageIndex &gt;=0. When the value of sImageIndex equals -1, it indicates that no image is right-clicked.
            </remarks>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnMouseDoubleClickHandler">
      <summary>
            Occurs when the mouse double clicks on an image.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <remarks>
            Short sImageIndex &gt;=0. When the value of sImageIndex equals -1, it indicates that no image is double-clicked.
            </remarks>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnTopImageInTheViewChangedHandler">
      <summary>
            Occurs when the current top image displayed in Dynamic .Net TWAIN is changed and the view mode is NOT set to -1 by -1.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <remarks>
            Short sImageIndex &gt;=0.
            </remarks>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnImageAreaSelectedHandler">
      <summary>
            Occurs when an area of the specified image is selected and the value of the <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.MouseShape"/> property is set to false.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <param name="left">The long point number for the left side of the rectangle are the mouse selects.</param>
      <param name="top">The long point number for the top side of the rectangle are the mouse selects.</param>
      <param name="right">The long point number for the right side of the rectangle are the mouse selects.</param>
      <param name="bottom">The long point number for the bottom side of the rectangle are the mouse selects.</param>
      <remarks>
            Short sImageIndex &gt;=0. 
            </remarks>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.Delegate.OnImageAreaDeselectedHandler">
      <summary>
            Occurs when the selected area of the specified image is deselected and the value of the <see cref="P:Dynamsoft.DotNet.TWAIN.Interface.ITwain.MouseShape"/> property is set to false.
            </summary>
      <param name="sImageIndex">Specifies the index of image in buffer. The index is 0-based.</param>
      <remarks>
            Short sImageIndex &gt;=0.
            </remarks>
    </member>
    <member name="T:MD5.MD5InitializerConstant">
      <summary>
            constants for md5
            </summary>
    </member>
    <member name="T:MD5.Digest">
      <summary>
            Represent digest with ABCD
            </summary>
    </member>
    <member name="T:MD5.MD5Helper">
      <summary>
            helper class providing suporting function
            </summary>
    </member>
    <member name="M:MD5.MD5Helper.RotateLeft(System.UInt32,System.UInt16)">
      <summary>
            Left rotates the input word
            </summary>
      <param name="uiNumber">a value to be rotated</param>
      <param name="shift">no of bits to be rotated</param>
      <returns>the rotated value</returns>
    </member>
    <member name="M:MD5.MD5Helper.ReverseByte(System.UInt32)">
      <summary>
            perform a ByteReversal on a number
            </summary>
      <param name="uiNumber">value to be reversed</param>
      <returns>reversed value</returns>
    </member>
    <member name="T:MD5.MD5">
      <summary>
            Summary description for MD5.
            </summary>
    </member>
    <member name="F:MD5.MD5.T">
      <summary>
            lookup table 4294967296*sin(i)
            </summary>
    </member>
    <member name="F:MD5.MD5.X">
      <summary>
            X used to proces data in 
            512 bits chunks as 16 32 bit word
            </summary>
    </member>
    <member name="F:MD5.MD5.dgFingerPrint">
      <summary>
            the finger print obtained. 
            </summary>
    </member>
    <member name="F:MD5.MD5.m_byteInput">
      <summary>
            the input bytes
            </summary>
    </member>
    <member name="M:MD5.MD5.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:MD5.MD5.CalculateMD5Value">
      <summary>
            calculat md5 signature of the string in Input
            </summary>
      <returns> Digest: the finger print of msg</returns>
    </member>
    <member name="M:MD5.MD5.TransH(System.UInt32@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.UInt32)">
      <summary>
            perform transformatio using h(b^c^d)
            </summary>
    </member>
    <member name="M:MD5.MD5.TransI(System.UInt32@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.UInt32)">
      <summary>
            perform transformatio using i (c^(b|~d))
            </summary>
    </member>
    <member name="M:MD5.MD5.PerformTransformation(System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
      <summary>
            Perform All the transformation on the data
            </summary>
      <param name="A">A</param>
      <param name="B">B </param>
      <param name="C">C</param>
      <param name="D">D</param>
    </member>
    <member name="M:MD5.MD5.CreatePaddedBuffer">
      <summary>
            Create Padded buffer for processing , buffer is padded with 0 along 
            with the size in the end
            </summary>
      <returns>the padded buffer as byte array</returns>
    </member>
    <member name="M:MD5.MD5.CopyBlock(System.Byte[],System.UInt32)">
      <summary>
            Copies a 512 bit block into X as 16 32 bit words
            </summary>
      <param name="bMsg"> source buffer</param>
      <param name="block">no of block to copy starting from 0</param>
    </member>
    <member name="P:MD5.MD5.Value">
      <summary>
            gets or sets as string
             </summary>
    </member>
    <member name="P:MD5.MD5.ValueAsByte">
      <summary>
            get/sets as  byte array 
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.OCR.ResultFormat">
      <summary>
            Supported OCR output format.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.ResultFormat.Text">
      <summary>
            Pure text ASCII string.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.ResultFormat.PDFPlainText">
      <summary>
            PDF plain text.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.ResultFormat.PDFImageOverText">
      <summary>
            PDF image over text.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.OCR.PageSetMode">
      <summary>
            Possible modes for page layout analysis.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.PageSetMode.PSM_OSD_ONLY">
      <summary>
            Orientation and script detection only.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.PageSetMode.PSM_AUTO_OSD">
      <summary>
            Automatic page segmentation with orientation and script detection. (OSD)
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.PageSetMode.PSM_AUTO_ONLY">
      <summary>
            Automatic page segmentation, but no OSD, or OCR.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.PageSetMode.PSM_AUTO">
      <summary>
            Fully automatic page segmentation, but no OSD. (Default)
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.PageSetMode.PSM_SINGLE_COLUMN">
      <summary>
            Assume a single column of text of variable sizes.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.PageSetMode.PSM_SINGLE_BLOCK_VERT_TEXT">
      <summary>
            Assume a single uniform block of vertically aligned text.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.PageSetMode.PSM_SINGLE_BLOCK">
      <summary>
            Assume a single uniform block of text.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.PageSetMode.PSM_SINGLE_LINE">
      <summary>
            Treat the image as a single text line.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.PageSetMode.PSM_SINGLE_WORD">
      <summary>
            Treat the image as a single word.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.PageSetMode.PSM_CIRCLE_WORD">
      <summary>
            Treat the image as a single word in a circle.
            </summary>
    </member>
    <member name="F:Dynamsoft.DotNet.TWAIN.OCR.PageSetMode.PSM_SINGLE_CHAR">
      <summary>
            Treat the image as a single character.
            </summary>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.OCR.OCRReader.OCRFile">
      <summary>
            Now support Tiff, png, jpeg, bmp
            </summary>
      <param name="lImages"/>
      <param name="ImagePaths"/>
      <param name="RetPDFSize"/>
      <param name="strTessDataPath"/>
      <param name="strLanguage"/>
      <param name="iPageMode"/>
      <returns/>
    </member>
    <member name="T:Dynamsoft.DotNet.TWAIN.OCR.OCRReader.OCRMemory">
      <summary>
            Now only support Tiff image in memory
            </summary>
      <param name="lImages"/>
      <param name="ImageBuffers"/>
      <param name="ImageBufferSizes"/>
      <param name="RetPDFSize"/>
      <param name="strTessDataPath"/>
      <param name="strLanguage"/>
      <param name="iPageMode"/>
      <returns/>
    </member>
  </members>
</doc>
